---
title: "Untitled"
author: "Francesco Pupillo"
date: "4/15/2021"
output:
   html_document:
    toc: true
    toc_depth: 2
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

```{r message=FALSE, warning=FALSE, include=T}
# set current directory to the parent folder
setwd(dirname(getwd()))

rm(list=ls())
library(dplyr)
library(ggplot2)
library(lme4)
library(car)
library(gridExtra)
library(lmerTest)
source("helper_functions/selPart.R")
source("helper_functions/repeatAssoc.R")

```


```{r, include=T}
setwd(dirname(getwd()))

# set current directory to the parent folder
cd<-getwd()
setwd("data_files")
files<-selPart(3)
setwd(cd)

# retrieve file
day2data<-read.csv("output_files/day2_accuracy.csv")

# modify file 1 as it seems to be linked to part 2 by mist. So the part 2 file actually belogs to participant 1.
filetomod<-read.csv(paste("data_files/", files[1], sep=""))
filetomod$participant<-1
# save it
write.csv(filetomod,paste("data_files/", files[1], sep=""))
```

```{r include=F}
setwd(dirname(getwd()))

longDatarecog<-vector()
recogData<-vector()


longDatarecog<-vector()
recogData<-vector()


for (j in 1: length(files)){
  tryCatch({


    recog<-read.csv(paste("data_files/", files[j], sep=""))
    recog<-repeatAssoc(recog)
    # create a file with only the association task
    assoc<-recog[!is.na(recog$resp_assoc.rt),]
    # delete the association task in the recog file
    recog<-recog[!is.na(recog$recog_resp.rt), ]
    # select variables of interest
    recog <- select(recog,recog_resp.keys,recog_resp.rt,conf_resp.keys,conf_resp.rt,images,corr_ans, images)
    
    # get SubNum
    SubNum<-unique(recog$participant)
    
    # check if there are repeated images for that participant
    day2Sub<-day2data[day2data$SubNum==SubNum,]
    # selet only file for no warmup
    day2Sub<-day2Sub[day2Sub$listN!=0,]
    
    # check if there are repetition
    objects<-as.character(unique(day2Sub$image))
    
    repIm<-vector()
    counter<-1
    for (n in 1:length(objects)){
      obj<-day2Sub$trialNum[day2Sub$image==objects[n]]
      if (length(obj)>1){
        repIm[counter]<-objects[n]
        counter<-counter+1
      }
      
    }
    
    if (length(repIm)>1){print(paste("repeated object for Sub =", SubNum))}
    
    # compute accuracy
    recog$acc<-NA
    for (n in 1 :nrow(recog)){
      if (recog$recog_resp.keys[n]==recog$corr_ans[n]){
        recog$acc[n]<-1
      }else{recog$acc[n]<-0} 
    }
    
    # calculate hit, miss, rej, and FA
    for ( i in 1:nrow(recog)){
      if (recog$corr_ans[i]=="left"& recog$recog_resp.keys[i]=="left" ){
        recog$type[i]<-"HIT"
      } else if (recog$corr_ans[i]=="left"& recog$recog_resp.keys[i]=="right" ){
        recog$type[i]<-"Miss"
      } else if(recog$corr_ans[i]=="right"& recog$recog_resp.keys[i]=="right" ){
        recog$type[i]<-"CorrRej"
      } else if (recog$corr_ans[i]=="right"& recog$recog_resp.keys[i]=="left" ){
        recog$type[i]<-"FA"
      }
    }
    
    # now scoring for recognition each image
    # first subset the day2 data
    # for the subject number, the first file present "02" in the file name, while it is actyally
    # participant 1
    if (j==1){
      SubNum=1
    } else{
      SubNum<-as.numeric(substr(files[j], 1,2))
    }
    
    day2Sub<-day2data[day2data$SubNum==SubNum,]
    # delete task 0
    day2Sub<-day2Sub[day2Sub$listN!=0,]
    
    day2Sub$image<-as.character(day2Sub$image)
    
    # then substring the images in the actual file
    recog$imageName<-substr(recog$images, 17, (length(recog$images)-4))
    assoc$imageName<-substr(assoc$images, 17, (length(assoc$images)-4))
    
    # we are only testing some of the images presented in the statistical learning task,
    # the congruent ones. 
    # therefore, the approach should be to take only the congruent ones
    # take the accuracy of the recognition and add it to day2Sub
    
    day2Sub<-day2Sub[day2Sub$trialCond==1,]
    day2Sub$recogAcc<-NA
    day2Sub$confidence<-NA
    
    # do the same for association task
    day2Sub$association<-NA
    
    for (i in 1: nrow(day2Sub)){
      tryCatch({
        day2Sub$recogAcc[i]<-recog$acc[recog$imageName==day2Sub$image[i]]
        # add confidence
        day2Sub$confidence[i]<-recog$conf_resp.keys[recog$imageName==day2Sub$image[i]]
        # add association
        day2Sub$association[i]<-as.character(assoc$resp_assoc.keys[recog$imageName==day2Sub$image[i]])
        # RT
        day2Sub$RTrecog[i]<-recog$recog_resp.rt[recog$imageName==day2Sub$image[i]]

      },error=function(w){print(paste("problem with part", j, "trial", i, "image",day2Sub$image[i]))} 
      )
    }
    
    longDatarecog<-rbind(longDatarecog, day2Sub)
    recog$SubNum<-SubNum
    recogData<-rbind(recogData, recog)
  })
}

# create variable for correct association
longDatarecog$corr_ans_assoc<-NA
for (n in 1:nrow(longDatarecog)){
  if (!is.na(longDatarecog$association[n])){
    
    if((longDatarecog$character[n]=="m2" & longDatarecog$association[n]=="left") |
       (longDatarecog$character[n]=="m5" & longDatarecog$association[n]=="right"))
    { longDatarecog$corr_ans_assoc[n]<-1}else{longDatarecog$corr_ans_assoc[n]<-0}
    
  }
}

# check how many times an image appears, to see if there are duplicates
count<- longDatarecog %>% 
  group_by(SubNum)%>%
  tally()


# write the file
write.csv(longDatarecog, "output_files/recognitionData.csv", col.names = F)

```

```{r general performance, echo=FALSE}
setwd(dirname(getwd()))

VoI<-c("SubNum", "type")
# wide dataset
wideData<-table(recogData[,VoI])

# convert it to a data.frame
wideData<-as.data.frame.matrix(wideData)

# include row names
wideData$SubNum<-rownames(wideData)

# reorder the columns to make the id variable the first one
wideData<-wideData[, c(5,1:4)]

# compute percentage HIT
wideData$HITrate<-wideData$HIT/(wideData$HIT+wideData$Miss)

# percentage false alarm
wideData$FArate<-wideData$FA/(wideData$FA+wideData$CorrRej)

# calculate dprime
library(psycho)

indices <- psycho::dprime(wideData$HIT, wideData$FA, wideData$Miss, wideData$CorrRej)
wideData<-cbind(wideData, indices)

# PR
wideData$hitMinFA<-wideData$HITrate-wideData$FArate

wideData

# recogn
assocMem<-longDatarecog[longDatarecog$recogAcc==1,] %>% # only for accurate performance
  group_by(SubNum) %>%
  summarize(mean_assoc = mean(corr_ans_assoc, na.rm=T))

```

```{r plots}
setwd(dirname(getwd()))

# convert the variable as factor
longDatarecog$befAft<-as.factor(longDatarecog$befAft)
levels(longDatarecog$befAft)<-c("afterCP", "beforeCP")

# group by ID
groupData<-longDatarecog %>%
             group_by(SubNum, befAft, listN) %>%
  summarise (recogAcc = mean(recogAcc), 
             RT=mean(RT))

# before and after in recognition
# excluding the first list
ggplot(longDatarecog[longDatarecog$listN!=2,], aes(befAft, recogAcc))+ geom_bar(aes(befAft, recogAcc, fill = befAft),
                                                                                position="dodge",stat="summary", fun.y="mean", SE=T)+
  stat_summary(fun.data = "mean_cl_boot", size = 0.8, geom="errorbar", width=0.2 )+
  #geom_jitter( size=1,width=0.1)+
  theme(axis.text.x = element_blank())+ # we are showing the different levels through the colors, so we can avoid naming the bars
  theme(axis.ticks.x = element_blank())+
  theme_bw()+
   geom_line(data = groupData, aes(befAft, recogAcc,group = SubNum), size=1, alpha=0.4, stat="summary")+

  #facet_grid(.~rec_session)+
  theme(strip.text.x = element_text(size = 13))+ 
  ylab(" % Hit")+
  ylim(c(0,1))+
  # xlab("feedback")+
  scale_fill_manual("legend", values = c("afterCP" = "darkgoldenrod1", "beforeCP" = "darkred"))+
  theme(axis.text.x = element_text( size = 20, angle = 45))+
  theme(axis.title=element_text(size=14,face="bold"))+
  theme(legend.position = "none")


# by list
ggplot(longDatarecog[longDatarecog$listN!=2,], aes(befAft, recogAcc))+ geom_bar(aes(befAft, recogAcc, fill = befAft),
                                                       position="dodge",stat="summary", fun.y="mean", SE=T)+
  stat_summary(fun.data = "mean_cl_boot", size = 0.8, geom="errorbar", width=0.2 )+
  #geom_jitter( size=1,width=0.1)+
  theme(axis.text.x = element_blank())+ # we are showing the different levels through the colors, so we can avoid naming the bars
  theme(axis.ticks.x = element_blank())+
  theme_bw()+
  facet_grid(.~listN)+
  theme(strip.text.x = element_text(size = 13))+ 
  ylab(" % Hit")+
  ylim(c(0,1))+
  # xlab("feedback")+
  scale_fill_manual("legend", values = c("afterCP" = "darkgoldenrod1", "beforeCP" = "darkred"))+
  theme(axis.text.x = element_text( size = 20, angle = 15))+
  theme(axis.title=element_text(size=14,face="bold"))+
  theme(legend.position = "none")

# confidence
ggplot(longDatarecog[longDatarecog$listN!=2,], aes(befAft, confidence))+ geom_bar(aes(befAft, confidence, fill = befAft),
                                                                                  position="dodge",stat="summary", fun.y="mean", SE=T)+
  stat_summary(fun.data = "mean_cl_boot", size = 0.8, geom="errorbar", width=0.2 )+
  #geom_jitter( size=1,width=0.1)+
  theme(axis.text.x = element_blank())+ # we are showing the different levels through the colors, so we can avoid naming the bars
  theme(axis.ticks.x = element_blank())+
  theme_bw()+
  #facet_grid(accuracy~listN)+
  theme(strip.text.x = element_text(size = 13))+ 
  ylab("Confidence")+
  ylim(c(0,4))+
  # xlab("feedback")+
  scale_fill_manual("legend", values = c("afterCP" = "darkgoldenrod1", "beforeCP" = "darkred"))+
  theme(axis.text.x = element_text( size = 20, angle = 45))+
  theme(axis.title=element_text(size=14,face="bold"))+
  theme(legend.position = "none")

# only for high confidence
ggplot(longDatarecog[longDatarecog$confidence>=3 ,], aes(befAft, recogAcc))+ geom_bar(aes(befAft, recogAcc, fill = befAft),
                                                                                      position="dodge",stat="summary", fun.y="mean", SE=T)+
  stat_summary(fun.data = "mean_cl_boot", size = 0.8, geom="errorbar", width=0.2 )+
  #geom_jitter( size=1,width=0.1)+
  theme(axis.text.x = element_blank())+ # we are showing the different levels through the colors, so we can avoid naming the bars
  theme(axis.ticks.x = element_blank())+
  theme_bw()+
  facet_grid(.~listN)+
  theme(strip.text.x = element_text(size = 13))+ 
  ylab(" % Hit")+
  # xlab("feedback")+
  scale_fill_manual("legend", values = c("afterCP" = "darkgoldenrod1", "beforeCP" = "darkred"))+
  theme(axis.text.x = element_text( size = 20, angle = 45))+
  theme(axis.title=element_text(size=14,face="bold"))+
  theme(legend.position = "none")

# only for low confidence
ggplot(longDatarecog[longDatarecog$confidence<=2 ,], aes(befAft, recogAcc))+ geom_bar(aes(befAft, recogAcc, fill = befAft),
                                                                                      position="dodge",stat="summary", fun.y="mean", SE=T)+
  stat_summary(fun.data = "mean_cl_boot", size = 0.8, geom="errorbar", width=0.2 )+
  #geom_jitter( size=1,width=0.1)+
  theme(axis.text.x = element_blank())+ # we are showing the different levels through the colors, so we can avoid naming the bars
  theme(axis.ticks.x = element_blank())+
  theme_bw()+
  facet_grid(.~listN)+
  theme(strip.text.x = element_text(size = 13))+ 
  ylab(" % Hit")+
  # xlab("feedback")+
  scale_fill_manual("legend", values = c("afterCP" = "darkgoldenrod1", "beforeCP" = "darkred"))+
  theme(axis.text.x = element_text( size = 20, angle = 45))+
  theme(axis.title=element_text(size=14,face="bold"))+
  theme(legend.position = "none")

# is that significant?
befAftAccModCond<-glmer(recogAcc~befAft+(1|SubNum), family=binomial(), data= longDatarecog[longDatarecog$confidence>=3&longDatarecog$listN!=2,])
summary(befAftAccModCond)


# reaction times
ggplot(longDatarecog[longDatarecog$listN!=2,], aes(befAft, RTrecog))+ 
  geom_bar(aes(befAft, RTrecog, fill = befAft),
           position="dodge",stat="summary", fun.y="mean", SE=T)+
  stat_summary(fun.data = "mean_cl_boot", size = 0.8, geom="errorbar", width=0.2 )+
  #geom_jitter( size=1,width=0.1)+
  theme(axis.text.x = element_blank())+ # we are showing the different levels through the colors, so we can avoid naming the bars
  theme(axis.ticks.x = element_blank())+
  theme_bw()+
  #facet_grid(.~listN)+
  theme(strip.text.x = element_text(size = 13))+ 
  ylab(" % RT")+
  # xlab("feedback")+
  scale_fill_manual("legend", values = c("afterCP" = "darkgoldenrod1", "beforeCP" = "darkred"))+
  theme(axis.text.x = element_text( size = 20, angle = 45))+
  theme(axis.title=element_text(size=14,face="bold"))+
  theme(legend.position = "none")

# as a function of accuracy
ggplot(longDatarecog[longDatarecog$listN!=2,], aes(befAft, RTrecog))+ 
  geom_bar(aes(befAft, RTrecog, fill = befAft),
           position="dodge",stat="summary", fun.y="mean", SE=T)+
  stat_summary(fun.data = "mean_cl_boot", size = 0.8, geom="errorbar", width=0.2 )+
  #geom_jitter( size=1,width=0.1)+
  theme(axis.text.x = element_blank())+ # we are showing the different levels through the colors, so we can avoid naming the bars
  theme(axis.ticks.x = element_blank())+
  theme_bw()+
  facet_grid(.~recogAcc)+
  theme(strip.text.x = element_text(size = 13))+ 
  ylab(" % RT")+
  # xlab("feedback")+
  scale_fill_manual("legend", values = c("afterCP" = "darkgoldenrod1", "beforeCP" = "darkred"))+
  theme(axis.text.x = element_text( size = 20, angle = 45))+
  theme(axis.title=element_text(size=14,face="bold"))+
  theme(legend.position = "none")

#by accuracy
ggplot(longDatarecog[longDatarecog$listN!=2,], aes(befAft, recogAcc))+ geom_bar(aes(befAft, recogAcc, fill = befAft),
                                                                                position="dodge",stat="summary", fun.y="mean", SE=T)+
  stat_summary(fun.data = "mean_cl_boot", size = 0.8, geom="errorbar", width=0.2 )+
  #geom_jitter( size=1,width=0.1)+
  theme(axis.text.x = element_blank())+ # we are showing the different levels through the colors, so we can avoid naming the bars
  theme(axis.ticks.x = element_blank())+
  theme_bw()+
  #facet_grid(.~rec_session)+
  theme(strip.text.x = element_text(size = 13))+ 
  ylab(" % Hit")+
  # xlab("feedback")+
  scale_fill_manual("legend", values = c("afterCP" = "darkgoldenrod1", "beforeCP" = "darkred"))+
  theme(axis.text.x = element_text( size = 20))+
  theme(axis.title=element_text(size=14,face="bold"))+
  theme(legend.position = "none")+
  facet_wrap(.~accuracy)

```

