---
title: "Analysis PREMUP-pilot"
author: "Francesco Pupillo"
date: "4/27/2021"
html_document:
    toc: true
    toc_depth: 2
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

```{r initialize, message=FALSE, warning=FALSE, include=FALSE}
# model based stats
rm(list=ls())

library(ggplot2)
library(lme4)
library(dplyr)
library(reshape2)
library(lmerTest)
library(car)


# set current directory to the parent folder
setwd(dirname(getwd()))

setup = "pilot"

cd<-getwd()

setwd("output_files")

getwd()
# get the files
files<-list.files( pattern ="fittedData.pilot.Phase2.*")

```


```{r echo=FALSE, message=FALSE, warning=FALSE}

# set current directory to the parent folder
setwd(dirname(getwd()))

getwd()

# absolute path
abs<-"/home/francesco/PowerFolders/Frankfurt_University/PIVOTAL/PREMUP/computational_model/output_files/"

# loop through the files
for (file in files[c(2,4)]){
  
  modname<- substr(file, 40, nchar(file)-4)
  print( paste("Model = ", modname ))
  
  fittedData<-read.csv(paste(abs, file, sep=""))
  
  # exclude fillers
  fittedData<-fittedData[fittedData$pred_Cond!=4,]
  
  # exclude participants with low performance in phase1
  exclPhase1<-c(7 ,16, 19, 20, 23)
  
  fittedData<-fittedData[!fittedData$SubNum %in% exclPhase1, ]
  
  # convert variables
  fittedData$PE_level<-as.factor(fittedData$pe_level)
  fittedData$PE_level<-factor(fittedData$PE_level, level = c("LowPE", "MediumPE", "HighPE"))
  
  fittedData$rec_session<-as.factor(fittedData$rec_session)
  fittedData$rec_session<-factor(fittedData$rec_session, level = c("ImmediateRec", "DelayedRec"))
  
  
  ##############################################################
  #### PE depending on the response
  ##############################################################
  
  fittedData$PEresp<-NA
  if (!is.null(fittedData$Delta1)){
    for (o in 1: nrow(fittedData)){
      if (fittedData$response[o]==1){
        fittedData$PEresp[o]<-fittedData$Delta1[o]
      }else if(fittedData$response[o]==2){
        fittedData$PEresp[o]<-fittedData$Delta2[o]
      }else if(fittedData$response[o]==3){
        fittedData$PEresp[o]<-fittedData$Delta3[o]
      } else {fittedData$PEresp[o]<-NA}
    }
  } else {fittedData$PEresp[o] <-fittedData$Delta}
  
  
  #summarise
  fittedData %>%
    group_by (pe_level) %>%
    summarise(mean=mean(PEresp, na.rm=T))
  
  
  # distribution of PE by condition
  PErespdistr<-ggplot(fittedData, aes(x= PEresp, fill=PE_level))
  print(
  PErespdistr+geom_histogram()+ facet_grid( ~ PE_level)+ggtitle("PE based on the feedback")
  )
  # by participant
  
  g<-ggplot(fittedData, aes(x=PEresp))+ geom_histogram()+
    #aes(colour = factor(SubNum))
    facet_wrap(.~SubNum)
  print(g) 
  
  # plot it PE by recog
  PErespPlot<-ggplot(fittedData, aes(x=PEresp, y=rec_acc))
  print(
  PErespPlot+
    geom_line(stat = "smooth", method="glm",formula=y~x,method.args=list(family="binomial"),
              se=F, alpha = 0.5)+aes(colour = factor(SubNum))+
    geom_smooth(method="glm",formula=y~x,method.args=list(family="binomial"), colour="black", se=T)+
    theme(strip.text.x = element_text(size = 13))+
    facet_wrap(.~rec_session) +ggtitle("effect of feedback-based PE on memory")
  )
  modresp<-glmer(rec_acc~PEresp*rec_session+(PEresp*rec_session|SubNum),family=binomial,
                 data = fittedData, 
                 control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=100000)))
  
  print(
  summary(modresp)
  )
  # only immed
  modImm<-glmer(rec_acc~PEresp+(PEresp|SubNum),family=binomial,
                data = fittedData[fittedData$rec_session=="ImmediateRec",])
  
  print(
  summary(modImm)
  )
  # delayed
  modDel<-glmer(rec_acc~PEresp+(PEresp|SubNum),family=binomial,
                data = fittedData[fittedData$rec_session=="DelayedRec",])
  
  print(
  summary(modDel)
  )
  
  # is there a quadratic effect?
  modrespquad<-glmer(rec_acc~poly(PEresp,2)*rec_session+(PEresp*rec_session|SubNum),family=binomial,
                     data = fittedData[!is.na(fittedData$PEresp),], 
                     control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=100000)))
  
  summary(modrespquad)

  # only on the right side
  modImmPos<-glmer(rec_acc~PEresp+(PEresp|SubNum),family=binomial,
                data = fittedData[fittedData$rec_session=="ImmediateRec"&fittedData$acc==1,])
  
  print(
  summary(modImmPos)
  )
  
  # only on the left side
  modImmNeg<-glmer(rec_acc~PEresp+(PEresp|SubNum),family=binomial,
                   data = fittedData[fittedData$rec_session=="ImmediateRec"&fittedData$acc==0,])
  
  print(
  summary(modImmNeg)
  )
  ####### now delayed
  # only positive
  modDelPos<-glmer(rec_acc~PEresp+(PEresp|SubNum),family=binomial,
                   data = fittedData[fittedData$rec_session=="DelayedRec"&fittedData$acc==1,])
  
  print(
  summary(modDelPos)
  )
  # only negative
  modDelNeg<-glmer(rec_acc~PEresp+(PEresp|SubNum),family=binomial,
                   data = fittedData[fittedData$rec_session=="DelayedRec"&fittedData$acc==0,])
  print(
  summary(modDelNeg)
  )
  ### Pe quantiles
  quantPEresp<-quantile(fittedData$PEresp, na.rm=T)
  
  fittedData$PEquantresp<-NA
  for (o in 1: nrow(fittedData)){
    if (!is.na(fittedData$PEresp[o])){
      if (fittedData$PEresp[o]> quantPEresp[1] & fittedData$PEresp[o]< (quantPEresp[2])){
        fittedData$PEquantresp[o]<-1
        
      }else if (fittedData$PEresp[o]>= quantPEresp[2] & fittedData$PEresp[o]< quantPEresp[3] ){
        fittedData$PEquantresp[o]<-2
      }else if(fittedData$PEresp[o]>=  quantPEresp[3] & fittedData$PEresp[o]<quantPEresp[4] ){
        fittedData$PEquantresp[o]<-3
      }else if(fittedData$PEresp[o]>=quantPEresp[4]){
        fittedData$PEquantresp[o]<-4
      }
    }
  }
  
  fittedData$PEquantresp<-as.factor(fittedData$PEquantresp)
  
  
  # take the se within-participant
  data_agg<-fittedData %>%
    group_by(rec_session, PEquantresp, SubNum) %>%
    dplyr::summarise(rec_acc = mean(rec_acc, na.rm = T))
  
  library(Rmisc)
  dat_summary <- summarySEwithin(data_agg,
                                 measurevar = "rec_acc",
                                 withinvars = c("PEquantresp", "rec_session"), 
                                 idvar = "SubNum")
  
  
  gplotquant<-ggplot(data_agg[complete.cases(data_agg$PEquantresp),], aes( x=PEquantresp, y=rec_acc))+
    geom_bar(aes(PEquantresp, rec_acc, fill = PEquantresp),
             position="dodge",stat="summary", fun.y="mean", SE=T)+
    
    geom_errorbar(aes(y = rec_acc, ymin = rec_acc - se, ymax = rec_acc + se),
                  color = "black", width = 0.10, data=dat_summary)+
    facet_wrap(rec_session~.)+
    scale_x_discrete(
      labels=c(as.character(round(quantPEresp,2)), 0.99)
    )
  
  print(gplotquant)
  
    ggsave( paste("/home/francesco/PowerFolders/Frankfurt_University/PIVOTAL/PREMUP/computational_model/figures/",
                "PEchoiceByPE_quantiles_", setup, "_", modname, ".jpg", sep=""))
    
    
    # updating
     # distribution of PE by condition
  UPrespdistr<-ggplot(fittedData, aes(x= update, fill=PE_level))
  print(
  PErespdistr+geom_histogram()+ facet_grid( ~ PE_level)+ggtitle("PE based on the feedback")
  )
  # by participant
  
  g<-ggplot(fittedData, aes(x=update))+ geom_histogram()+
    #aes(colour = factor(SubNum))
    facet_wrap(.~SubNum)
  print(g) 
  
  # plot it PE by recog
  PErespPlot<-ggplot(fittedData, aes(x=update, y=rec_acc))
  print(
  PErespPlot+
    geom_line(stat = "smooth", method="glm",formula=y~x,method.args=list(family="binomial"),
     se=F, alpha = 0.5)+aes(colour = factor(SubNum))+
        geom_line(stat = "smooth", method="glm",formula=y~x,method.args=list(family="binomial"),
        se=F, alpha = 0.5)+aes(colour = factor(SubNum))+
    geom_smooth(method="glm",formula=y~x,method.args=list(family="binomial"), colour="black", se=T)+
        geom_smooth(method="lm",formula=y~x,method.args=list(family="binomial"), colour="black", se=T)+
    theme(strip.text.x = element_text(size = 13))+
    facet_wrap(.~rec_session) +ggtitle("effect of feedback-based PE on memory")
  )

  # model
  modUpd<-glmer(rec_acc~update*rec_session+(update*rec_session|SubNum),family=binomial,
                   data = fittedData)
  
  summary(modUpd)
  # at this point we need to take the error bars withing participant
  
  ###############################################################
  #### PE depending on the observation
  ##############################################################
  
  fittedData$PEobs<-NA
  for (o in 1: nrow(fittedData)){
    if (fittedData$object_cat[o]==1){
      fittedData$PEobs[o]<-fittedData$Delta1[o]
    }else if(fittedData$object_cat[o]==2){
      fittedData$PEobs[o]<-fittedData$Delta2[o]
    }else if(fittedData$object_cat[o]==3){
      fittedData$PEobs[o]<-fittedData$Delta3[o]
    }
  }
  
  #summarise
  fittedData %>%
    group_by (PE_level) %>%
    summarise(mean=mean(PEobs, na.rm=T)) 
  
  # distribution of PE by condition
  PEobsdistr<-ggplot(fittedData, aes(x= PEobs, fill=PE_level))
  print(
    PEobsdistr+geom_histogram()+ facet_grid( ~ PE_level)+ggtitle("PE based on the observation")
  )
  
  # by participant
  ggplot(fittedData, aes(x=PEobs))+ geom_histogram()+
    #aes(colour = factor(SubNum))
    facet_wrap(.~SubNum)
  
  # plot it PE by recog
  PErespPlot<-ggplot(fittedData, aes(x=PEobs, y=rec_acc))
  print(
    PErespPlot+
      geom_line(stat = "smooth", method="glm",formula=y~x,method.args=list(family="binomial"),
                se=F, alpha = 0.5)+aes(colour = factor(SubNum))+
      geom_smooth(method="glm",formula=y~x,method.args=list(family="binomial"), colour="black", se=T)+
      theme(strip.text.x = element_text(size = 13))+
      facet_wrap(.~rec_session) +ggtitle("effect of observational PE on memory")
  )
    ggsave( paste("/home/francesco/PowerFolders/Frankfurt_University/PIVOTAL/PREMUP/computational_model/figures/",
                "PEobs_by_recog_", setup, "_", modname, ".jpg", sep=""))
  # analyse
  modobs<-glmer(rec_acc~PEobs*rec_session+(PEobs*rec_session|SubNum),family=binomial,
                data = fittedData, 
                control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=100000)))
  
  summary(modobs)
  
  # immediate recognition
  modobsIMM<-glmer(rec_acc~PEobs+(PEobs|SubNum),family=binomial,
                   data = fittedData[fittedData$rec_session=="ImmediateRec",]) 
  
  
  summary(modobsIMM)
  
  # delayed recognition
  modobsDel<-glmer(rec_acc~PEobs+(PEobs|SubNum),family=binomial,
                   data = fittedData[fittedData$rec_session=="DelayedRec",]) 
  
  
  summary(modobsDel)
  
  # now quadratic
  PEobsPlot<-ggplot(fittedData[!is.na(fittedData$PEobs),], aes(x=PEobs, y=rec_acc))
  print(
    PEobsPlot+
      geom_line(stat = "smooth", method="glm",formula=y~poly(x,2),method.args=list(family="binomial"),
                se=F, alpha = 0.5)+aes(colour = factor(SubNum))+
      geom_smooth(method="glm",formula=y~poly(x, 2),method.args=list(family="binomial"), colour="black", se=T)+
      theme(strip.text.x = element_text(size = 13))+
      facet_wrap(.~rec_session) +ggtitle("effect of observational PE on memory")
  )
  modobsquad<-glmer(rec_acc~poly(PEobs, 2)*rec_session+(PEobs*rec_session|SubNum),family=binomial,
                    data = fittedData[!is.na(fittedData$PEresp),], 
                    control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=100000)))
  print(
    summary(modobsquad)
  )
  ### Pe quantiles
  quantPEobs<-quantile(fittedData$PEobs, na.rm=T)
  
  fittedData$PEquantobs<-NA
  for (o in 1: nrow(fittedData)){
    if (!is.na(fittedData$PEobs[o])){
      if (fittedData$PEobs[o]> quantPEobs[1] & fittedData$PEobs[o]< (quantPEobs[2])){
        fittedData$PEquantobs[o]<-1
        
      }else if (fittedData$PEobs[o]>= quantPEobs[2] & fittedData$PEobs[o]< quantPEobs[3] ){
        fittedData$PEquantobs[o]<-2
      }else if(fittedData$PEobs[o]>=  quantPEobs[3] & fittedData$PEobs[o]<quantPEobs[4] ){
        fittedData$PEquantobs[o]<-3
      }else if(fittedData$PEobs[o]>=quantPEobs[4]){
        fittedData$PEquantobs[o]<-4
      }
    }
  }
  
  # detach the Rmisc package
  detach("package:Rmisc", unload=TRUE)
  
  
  # take the se within-participant
  data_agg2<-fittedData %>%
    group_by(rec_session, PEquantobs, SubNum) %>%
    dplyr::summarise(rec_acc = mean(rec_acc, na.rm = T))
  
  library(Rmisc)
  dat_summary2 <- summarySEwithin(data_agg2,
                                  measurevar = "rec_acc",
                                  withinvars = c("PEquantobs", "rec_session"), 
                                  idvar = "SubNum")
  
  data_agg2$PEquantobs<-as.factor(data_agg2$PEquantobs)
  gplotquantObs<-ggplot(data_agg2[complete.cases(data_agg2$PEquantobs),], aes( x=PEquantobs, y=rec_acc))+
    geom_bar(aes(PEquantobs, rec_acc, fill = PEquantobs),
             position="dodge",stat="summary", fun.y="mean", SE=T)+
    
    geom_errorbar(aes(y = rec_acc, ymin = rec_acc - se, ymax = rec_acc + se),
                  color = "black", width = 0.10, data=dat_summary2[complete.cases(dat_summary2),])+
    facet_wrap(rec_session~.)+
    scale_x_discrete(
      labels=c(as.character(round(quantPEobs,2))) )
  
  print(gplotquantObs)
  
  
  
}
```
