# Configuration file 4

getPar<-function(SubNum, datafile){
  ########
  # Function to extract alpha and beta parameters 
  # estimated through RW model per participant
  # 
  # Input:
  #     SubNum - An integer indicatin the number
  #       of the participant
  #     datafile - a string vector indicating the file with the parameters
  #
  # Output:
  #     A list object with "alpha" and "beta" parameters for that participant.
  #      They can be indexed (e.g., "$alpha")
  #------------------------
  
  # retrieve file with parameters
  dataPar<-read.csv(datafile)
  
  alpha<-dataPar$alpha[dataPar$PartNum==SubNum]
  beta<-dataPar$beta[dataPar$PartNum==SubNum]
  
  return(list("alpha"=alpha, "beta"=beta))
}

getQsPhase1<-function(data){
  # this function takes the estimated data from phase 1
  # and return the last Qs by scene
  # 
  # Input:
  #   data: long data with estimated values from phase 1
  #   
  # Output:
  #   A dataframe with the Qs by scene
  #----------------------
  # we need a matrix that takes the last values of the Qs for each scene
  
  # initialize variables
  Qindex<-c("Q1", "Q2", "Q3")
  
  matrixQ<-matrix(NA, nrow = 6 ,ncol = 3)
  for (s in 1:6){
    matrixQ[s,]<-unlist(tail(data1[data1$scene_cat==s,Qindex],1))
  }
  
  matrixQ<-data.frame(matrixQ)
  names(matrixQ)<-Qindex
  return(matrixQ)
}

getQ_osPhase1<-function(data){
  # this function takes the estimated data from phase 1
  # and return the last Qs by scene
  # 
  # Input:
  #   data: long data with estimated values from phase 1
  #   
  # Output:
  #   A dataframe with the Qs by scene
  #----------------------
  # we need a matrix that takes the last values of the Qs for each scene
  
  # initialize variables
  Qindex<-c("Q1_o", "Q2_o", "Q3_o")
  
  matrixQ<-matrix(NA, nrow = 6 ,ncol = 3)
  for (s in 1:6){
    matrixQ[s,]<-unlist(tail(data1[data1$scene_cat==s,Qindex],1))
  }
  
  matrixQ<-data.frame(matrixQ)
  names(matrixQ)<-Qindex
  return(matrixQ)
  
}
  
  getCKsPhase1<-function(data){
    # this function takes the estimated data from phase 1
    # and return the last CKs by scene
    # 
    # Input:
    #   data: long data with estimated values from phase 1
    #   
    # Output:
    #   A dataframe with the CKs by scene
    #----------------------
    # we need a matrix that takes the last values of the Qs for each scene
    
    # initialize variables
    CKindex<-c("CK1", "CK2", "CK2")
    
    matrixCK<-matrix(NA, nrow = 6 ,ncol = 3)
    for (s in 1:6){
      matrixCK[s,]<-unlist(tail(data1[data1$scene_cat==s,CKindex],1))
    }
    matrixCK<-data.frame(matrixCK)
  names(matrixCK)<-CKindex
  return(matrixCK)
}

update<-function(r, Q, alpha){
  # This function returns the updated value q and delta according to 
  # Rescorla Wagner model
  #
  # Input
  #   r: reinforcement (feedback): 1 if correct, 0 if incorrect
  #   Q: value
  #   alpha: alpha parameter (learning rate)
  #
  # Output:
  #   updated Q and Delta (prediction error)
  # -------------
  delta = r - Q;
  Q = Q + alpha * delta
  return(c(Q, delta))
  
}

lik_RescorlaWagner_Phase2_Obs<-function (data1, data2,alpha, beta){
  # This function takes the data from phase 1 and phase 2 and calculates trial-by-trial PEs
  #
  # Input
  #   data1: data from phase1 of a participant
  #   data2; data of the same participant at phase2
  #   alpha: alpha estimated at phase1
  #   beta: beta estimated at phase1
  ##  feedback: 1: models are computed taken into account the feedbaack that is given to participants
  #             2: models are computed without taking into account the feedback. 
  #                Values and PE are updated depending on participants' choice 
  # Output:
  #   dataset with Q, p, delta variables added
  # -------------
  
  # assign trialNumber
  data2$trialN<-1:length (data2[,1])
  
  
  Qindex<-c("Q1", "Q2", "Q3")
  Pindex<-c("P1", "P2", "P3")
  
  data2$Q1<-NA; data2$Q2<-NA; data2$Q3<-NA
  # Ps (probabilities)
  data2$P1<-NA; data2$P2<-NA; data2$P3<-NA
  
  # Counter for indicating which scene has to be updated
  count<-rep(0, 6)
  T <- length(data2$trialN)
  
  # we need a matrix that takes the last values of the Qs for each scene
  matrixQ<-getQsPhase1(data1)
  # The next loop creates a dummy 3-digit array. Every digit refers to each of the three categories.
  # if feedback=1, the accuracy is taken into account. If feedback=2, only participants' response is taken into account. 
  # This will be used later on in the delta rule 
  #x<-getResp(data2,feedback) 
  # Counter for indicating which scene has to be updated
  
  # loop over trial
  for (t in 1:length(data2$trialN))  {
    
    # The next loop creates a dummy 3-digit array referring to accuracy. Every digit refers to each of the three categories.
    # This will be used later on in the delta rule
    
    # x<-matrix(NA, nrow = T ,ncol = 3)
    # for (n in 1:T){
    #   if (data2$acc[n]==1){
    #     if (data2$object_cat[n]==1){
    #       x[n,]<-c(1,0,0)
    #     } else if ((data2$object_cat[n]==2)){
    #       x[n,]<-c(0,1,0)
    #     } else if (data2$object_cat[n]==3){
    #       x[n,]<-c(0,0,1)}
    #   } else{
    #     x[n,]<-c(0,0,0)
    #   }
    # }
    
    # The following loop retrieves the Q values of the scene that corresponds to the current scene (time t). 
    
    if (count[data2$scene_cat[t]]==0){
      Q<-matrixQ[data2$scene_cat[t],]
      count[data2$scene_cat[t]]<-count[data2$scene_cat[t]]+1
    } else{
      Q<-data2[data2$scene_cat==data2$scene_cat[t],][count[data2$scene_cat[t]],Qindex]
      count[data2$scene_cat[t]]<-count[data2$scene_cat[t]]+1
    }
    
    # update choice probabilities using the softmax distribution
    p<-softmax(Q, beta)

    # compute Q, delta, and choice probability for actual choice
    if (data2$response[t]!=0){
      
      # prediction error
      delta <- 1 - Q[data2$object_cat[t]] # subtracting 1 to the objectcategory, the category shown at the end
      
      data2[t, "Delta"]<-delta
      
      # update the Q related to the response according to the rw model
      Q[data2$object_cat[t]] <-Q[data2$object_cat[t]] + alpha *delta
      
      } 
    # assign values to the dataset
    data2[t, Qindex]<-Q
    data2[t, Pindex]<-p
    
  }
    
  return(data2) 
}




lik_M3RescorlaWagner_Phase2<-function (data1, data2,alpha, beta, feedback){
  # This function takes the data from phase 1 and phase 2 and calculates trial-by-trial PEs
  #
  # Input
  #   data1: data from phase1 of a participant
  #   data2; data of the same participant at phase2
  #   alpha: alpha estimated at phase1
  #   beta: beta estimated at phase1
  ##  feedback: 1: models are computed taken into account the feedbaack that is given to participants
  #             2: models are computed without taking into account the feedback. 
  #                Values and PE are updated depending on participants' choice 
  # Output:
  #   dataset with Q, p, delta variables added
  # -------------
  
  # assign trialNumber
  data2$trialN<-1:length (data2[,1])
  
  
  Qindex<-c("Q1", "Q2", "Q3")
  Pindex<-c("P1", "P2", "P3")
  Deltaindex<-c("delta1", "delta2", "delta3")
  
  # Counter for indicating which scene has to be updated
  count<-rep(0, 6)
  T <- length(data2$trialN)
  
  # we need a matrix that takes the last values of the Qs for each scene
  matrixQ<-matrix(NA, nrow = 6 ,ncol = 3)
  for (s in 1:6){
    matrixQ[s,]<-unlist(tail(data1[data1$scene_cat==s,Qindex],1))
  }
  
  # The next loop creates a dummy 3-digit array. Every digit refers to each of the three categories.
  # if feedback=1, the accuracy is taken into account. If feedback=2, only participants' response is taken into account. 
  # This will be used later on in the delta rule 
  x<-getResp(data2,feedback) 
  
  # loop over trial
  for (t in 1:length(data2$trialN))  {
    
    # The following loop retrieves the Q values of the scene that corresponds to the current scene (time t). 
    
    if (count[data2$scene_cat[t]]==0){
      Q<-matrixQ[data2$scene_cat[t],]
      count[data2$scene_cat[t]]<-count[data2$scene_cat[t]]+1
    } else{
      Q<-data2[data2$scene_cat==data2$scene_cat[t],][count[data2$scene_cat[t]],Qindex]
      count[data2$scene_cat[t]]<-count[data2$scene_cat[t]]+1
    }
    
    
    # update probabilities according to the softmax distribution
    p<-softmax(Q, beta)
    
    # update Qs and delta's
    updated<-update(x[t,], as.numeric(Q), alpha)
    Q<-updated[1:3]
    Delta<-updated[4:6]
    
    # assign them to the dataset
    data2[t, Pindex]<-p
    data2[t, Qindex]<-Q
    data2[t, Deltaindex]<-Delta
  }
  return(data2) 
}

lik_RescorlaWagner_Phase2_Obs<-function (data1, data2,alpha, beta){
  # This function takes the data from phase 1 and phase 2 and calculates trial-by-trial PEs
  #
  # Input
  #   data1: data from phase1 of a participant
  #   data2; data of the same participant at phase2
  #   alpha: alpha estimated at phase1
  #   beta: beta estimated at phase1
  ##  feedback: 1: models are computed taken into account the feedbaack that is given to participants
  #             2: models are computed without taking into account the feedback. 
  #                Values and PE are updated depending on participants' choice 
  # Output:
  #   dataset with Q, p, delta variables added
  # -------------
  
  # assign trialNumber
  data2$trialN<-1:length (data2[,1])
  
  
  Qindex<-c("Q1", "Q2", "Q3")
  Pindex<-c("P1", "P2", "P3")
  
  data2$Q1<-NA; data2$Q2<-NA; data2$Q3<-NA
  # Ps (probabilities)
  data2$P1<-NA; data2$P2<-NA; data2$P3<-NA
  
  # Counter for indicating which scene has to be updated
  count<-rep(0, 6)
  T <- length(data2$trialN)


  
  # we need a matrix that takes the last values of the Qs for each scene
  matrixQ<-getQsPhase1(data1)
  # The next loop creates a dummy 3-digit array. Every digit refers to each of the three categories.
  # if feedback=1, the accuracy is taken into account. If feedback=2, only participants' response is taken into account. 
  # This will be used later on in the delta rule 
  #x<-getResp(data2,feedback) 
  # Counter for indicating which scene has to be updated
  
  # loop over trial
  for (t in 1:length(data2$trialN))  {
    
    # The next loop creates a dummy 3-digit array referring to accuracy. Every digit refers to each of the three categories.
    # This will be used later on in the delta rule
  
    # The following loop retrieves the Q values of the scene that corresponds to the current scene (time t). 
    
    if (count[data2$scene_cat[t]]==0){
      Q<-matrixQ[data2$scene_cat[t],]
      count[data2$scene_cat[t]]<-count[data2$scene_cat[t]]+1
    } else{
      Q<-data2[data2$scene_cat==data2$scene_cat[t],][count[data2$scene_cat[t]],Qindex]
      count[data2$scene_cat[t]]<-count[data2$scene_cat[t]]+1
    }
    
    # update choice probabilities using the softmax distribution
    p<-softmax(Q, beta)
    
    # compute Q, delta, and choice probability for actual choice
    if (data2$response[t]!=0){
      
      # prediction error
      delta <- 1 - Q[data2$object_cat[t]] # subtracting 1 to the objectcategory, the category shown at the end
      
      data2[t, "Delta"]<-delta
      
      # update the Q related to the response according to the rw model
      Q[data2$object_cat[t]] <-Q[data2$object_cat[t]] + alpha *delta
      
    } 
    # assign values to the dataset
    data2[t, Qindex]<-Q
    data2[t, Pindex]<-p
    
  }
  
  return(data2) 
}




lik_RescorlaWagner_Phase2_ObsALL<-function (data1, data2,alpha, beta){
  # This function takes the data from phase 1 and phase 2 and calculates trial-by-trial PEs
  #
  # Input
  #   data1: data from phase1 of a participant
  #   data2; data of the same participant at phase2
  #   alpha: alpha estimated at phase1
  #   beta: beta estimated at phase1
  #
  # Output:
  #   dataset with Q, p, delta variables added
  # -------------
  
  # assign trialNumber
  data2$trialN<-1:length (data2[,1])
  
  
  Qindex<-c("Q1", "Q2", "Q3")
  Pindex<-c("P1", "P2", "P3")
  Deltaindex<-c("delta1", "delta2", "delta3")
  
  # Counter for indicating which scene has to be updated
  count<-rep(0, 6)
  T <- length(data2$trialN)
  
  # we need a matrix that takes the last values of the Qs for each scene
  matrixQ<-getQsPhase1(data1)
  
  # matrix for the category
  x<-matrix(NA, nrow=nrow(data2), ncol=3)
  for (n in 1:length(data2$object_cat)){
    if (data2$object_cat[n]==1){
      x[n,]<-c(1,0,0)
    } else if ((data2$object_cat[n]==2)){
      x[n,]<-c(0,1,0)
    } else if (data2$object_cat[n]==3){
      x[n,]<-c(0,0,1)}
  }
  
  # The next loop creates a dummy 3-digit array. Every digit refers to each of the three categories.
  # if feedback=1, the accuracy is taken into account. If feedback=2, only participants' response is taken into account. 
  # This will be used later on in the delta rule 
  #x<-getResp(data2,feedback) 
  
  # loop over trial
  for (t in 1:length(data2$trialN))  {
    
    # The next loop creates a dummy 3-digit array referring to accuracy. Every digit refers to each of the three categories.
    # This will be used later on in the delta rule
    
    
    # The following loop retrieves the Q values of the scene that corresponds to the current scene (time t). 
    
    if (count[data2$scene_cat[t]]==0){
      Q<-matrixQ[data2$scene_cat[t],]
      count[data2$scene_cat[t]]<-count[data2$scene_cat[t]]+1
    } else{
      Q<-data2[data2$scene_cat==data2$scene_cat[t],][count[data2$scene_cat[t]],Qindex]
      count[data2$scene_cat[t]]<-count[data2$scene_cat[t]]+1
    }
    
    # update choice probabilities using the softmax distribution
    p<-softmax(Q, beta)
    
    delta <- x[t,]-Q # subtracting 1 to the objectcategory, the category shown at the end
    
    
    # update the Q related to the response according to the rw model
    Q <-Q+ alpha *delta
    
    # assign them to the dataset
    data2[t, Pindex]<-p
    data2[t, Qindex]<-Q
    data2[t, Deltaindex]<-delta
  }
  return(data2) 
}



