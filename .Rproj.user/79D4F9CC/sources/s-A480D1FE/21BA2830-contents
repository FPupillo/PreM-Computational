#-------------------------------------------------------------------------------------------------#
# Explore for priors
# Script to explore contingencies for the priors setup
#-------------------------------------------------------------------------------------------------#

rm(list=ls())
# set current directory to the parent folder
setwd(dirname(getwd()))

cd<-getwd()
# source the files with the function
# source(("computational_model/helper_functions/BICcompute.R"))
# source(here("computational_model/helper_functions/searchGlobal.R"))
# source(here("computational_model/helper_functions/softmax.R"))
# source(here("computational_model/helper_functions/getFiles.R"))
# source(here("computational_model/helper_functions/modelFunPhase2.R"))
# source(here("computational_model/helper_functions/getResp.R"))
# source(here("computational_model/helper_functions/getProbStrongWeak.R"))
# source(here("computational_model/helper_functions/getx.R"))
# source(here("computational_model/helper_functions/getU.R"))
source(("computational_model/helper_functions/fixnames.R"))
source(("computational_model/helper_functions/cumAccbyScene.R"))
# source(here("computational_model/helper_functions/getobs.R"))

library(ggplot2)
# library(lme4)
library(dplyr)
# library(reshape2)
# library(lmerTest)
# library(car)
#source("computational_model/helper_functions/cumAccbyScene.R")

setup = "priors"

# select only learning phase
phase1Files<- read.csv2("premup-priors/outputs/group_level/group_task-learning.csv",sep=";",
                        header=T,stringsAsFactors=FALSE)

# pnow encoding phase
phase2Files<- read.csv2("premup-priors/outputs/group_level/share/group_task-rec.csv",sep=";",
                        header=T,stringsAsFactors=FALSE)

# change names
phase1Files<-fixnames(phase1Files)

# now get cumacc per participant and scene
phase1Files<-cumAccbyScene(phase1Files)

# plot it
ggplot(phase1Files, aes(x = trialNbyscene, y=cumAccbyScene))+   stat_summary(fun.y="mean",geom="line")+
facet_wrap(scene_cat~.)

# by sub
#ggplot(phase1Files, aes(x = trialNbyscene, y=cumAccbyScene))+   stat_summary(fun.y="mean",geom="line")+
 # facet_grid(scene_cat~participant)


#---------------------------------------------------------------------------------------------#
#                             now model derived parameters - Phase1
#---------------------------------------------------------------------------------------------#
# retrieve the winning models
winMod<-read.csv("computational_model/winning_mods.csv")

# select the models of the setup
winMod<-winMod[winMod$setup==setup,2:3]

# unlist
winMod<-as.character(unlist(winMod))

for (mod in winMod){

# read files
# get phase 1 fittedfiles
phase1fitted<- read.csv(paste("computational_model/output_files/fittedData.",setup, ".Phase1.",
                             mod, ".csv", sep=""))

unique(phase1fitted$participant)

unique(phase1Files$participant)

# exclude participant 35 in phase1Files
phase1Files<-phase1Files[!phase1Files$participant %in% 35,]

phase1All<-cbind(phase1Files, phase1fitted[,23:43])

# plot only for one participant
ggplot(phase1fitted[phase1fitted$participant==9,], aes(x = trialN))+ 
  geom_line(aes(y=Q1), size = 1.5, color = "Red")+
  geom_line(aes(y=Q2), size = 1.5, color = "Blue")+
  #eom_line(aes(y=Delta1), size = 1.5, color = "red")+
  #geom_line(aes(y=Delta2), size = 1.5, color = "orange")+
  
  facet_wrap(scene_cat~.)


add_summary(a, "mean_sd")


# now phase 2

#---------------------------------------------------------------------------------------------#

# now get trial by subject and scene category
phase2Files %>%
  group_by(participant.x, scene_cat) %>%
  tally()

# there are fourty trials per scene. Now as a function of PElevel
phase2Files %>%
  group_by(participant.x, PE_level) %>%
  tally()

# so there is the problem: we need to get the Q