#------------------------------------------------------------------------------------------------#
# script that fit the winning models to each dataset and print the outputs
#
# this version is for the pilot setup. 
#------------------------------------------------------------------------------------------------#
# fit the models to the data

# set current directory to the parent folder
setwd(dirname(getwd()))

rm(list=ls())
cd<-getwd()
# source the files with the function
source(("computational_model/helper_functions/BICcompute.R"))
source(("computational_model/helper_functions/searchGlobal.R"))
source(("computational_model/helper_functions/softmax.R"))
source(("computational_model/helper_functions/getFiles.R"))
source(("computational_model/helper_functions/modelFunPhase2.R"))
source(("computational_model/helper_functions/getResp.R"))
source(("computational_model/helper_functions/getProbStrongWeak.R"))
source(("computational_model/helper_functions/getx.R"))
source(("computational_model/helper_functions/getU.R"))
source(("computational_model/helper_functions/getQsPhase1.R"))

# likelihood functions
setwd("computational_model/likelihood_functions")
likfun<-list.files()
for (f in 1:length(likfun)){
  source(likfun[f])
}
# fitting functions
setwd(paste(cd, "/computational_model/fitting_functions",sep=""))
fitfun<-list.files()
for (f in 1:length(fitfun)){
  source(fitfun[f])
}

setwd(cd)

# very important, the setup
setup <-"pilot"

# we have already estimated parameters on file 1 +file2. To fit the models, we can use only
phase1Files<-selPhase(phase = 1, experiment = "pilot")
setwd(cd)

# get phase 2
phase2Files<-selPhase(phase = 2, experiment = "pilot")
setwd(cd)

# retrieve the winning models
winMod<-read.csv("computational_model/winning_mods.csv")

# select the models of the setup
winMod<-winMod[winMod$setup==setup,2:3]

# unlist
winMod<-as.character(unlist(winMod))

# loop over mod
for(mod in winMod){
  
  # load likelihood function
  likelihoodfunction = get(paste("lik_", mod, sep=""))
  
  # load fitting function
  fittingfunction = get(paste("fit_", mod, sep=""))
  
  # getparameters
  filename<-paste("premup-", setup, "/outputs/group_level/computational_model",
                  "/ParameterEstimation.betalimit=10.initialQ=0.", mod, ".csv", sep="")
  
  # read the file with the parameters
  param<-read.csv(filename)
  
  # create an empty variable that will be the dataset with all participants' data
  dataAll<-vector()
  
  # for each subject
  for (j in 1:length(phase2Files)){
    
    # we are fitting the models only to phase 2
    # load phase 1 files
    file1<-read.csv(paste("premup-pilot/trial_sequences/",phase1Files[j], sep=""))
    
    # load phase 2 files
    file2<-read.csv(paste("premup-pilot/trial_sequences/",phase2Files[j], sep=""))
    
    # bind them
    fileAll<-(file2)
    
    # extract subjn
    SubNum<-round(as.numeric(substr(phase2Files[j],5,6)),1)
    
    # get parameters
    parameters<-param[param$PartNum==SubNum,]
   
    #---------------------------------------------------------------------------------------------#
    #---------------------------------extract parameters -----------------------------------------#
    #---------------------------------------------------------------------------------------------#
    alpha<-parameters$alpha
    beta<-parameters$beta
    alpha_c<-parameters$alpha_c
    beta_c<-parameters$beta_c
    initialQ =  matrix(0, ncol = 3, nrow = 6)
    #---------------------------------------------------------------------------------------------#
    
    #---------------------------------------------------------------------------------------------#
    #---------------------------------extract Qs -----------------------------------------#
    #---------------------------------------------------------------------------------------------#
    # we need to extract the Qs from phase1 as starting Qs for phase2

    # first, fit the data from phase1
    if (length(formals(likelihoodfunction))==5){        # single learning rate model
      
    data1<-likelihoodfunction(Data=file1, alpha=alpha, beta=beta, 
                              print = 3 , initialQ=initialQ)    
  
    }else{                                              # dual model                                           
      
      data1<-likelihoodfunction(Data = file1, alphapos = alpha, alphaneg = alpha_c, beta = beta,
                                  print =3, initialQ = matrix(0, ncol = 3, nrow = 6))
      
    }
    
    # now get the initial Qs for phase2
    initialQ<-getQsPhase1(data1)
    
    # fit to data
    if (length(formals(likelihoodfunction))==5){        # single learning rate model
    
      fitdata<-likelihoodfunction(Data = fileAll, alpha = alpha, beta = beta,
                                  print =3, initialQ =  initialQ)
    
    }else{                                              # dual model                                           
    
      fitdata<-likelihoodfunction(Data = fileAll, alphapos = alpha, alphaneg = alpha_c, beta = beta,
                                  print =3, initialQ = initialQ)
      
    }
    
    # create subjnum variable
    fitdata$SubNum<-SubNum
    
    # bind them with the whole dataset
    dataAll<-rbind(dataAll, fitdata)
  }
  
  # loop through subjects to get the recognition data
  for (j in 1:length(phase2Files)){
    tryCatch({
    # extract subjn
    SubNum<-round(as.numeric(substr(phase2Files[j],5,6)),1)
    
    # file name 
    if (SubNum<10){
      filename<-paste("PEM_", SubNum,"_results.csv", sep="")
    }else{ 
      filename<-paste("PEM_", SubNum,"_results.csv", sep="")
    }
    
    # read data
    data <- read.csv(paste("premup-pilot/merged_phases/", filename, sep="" ))
    
    # select only old items
    data<-data[data$rec_trialType=="old",]
    
    # append it to the final dataset  
    if (!exists('data3final')){
      data3final<-data
    } else{
      data3final<-rbind(data3final, data)
    }
  
}, error = function(e) { print(paste("problem with number", j))})
}
  # now merge the two datasets (encoding - model and recognition)
  DataAll<-cbind(dataAll,data3final)
  DataAll$pe_level<-as.factor(DataAll$pe_level)
  DataAll$rec_session<-as.factor(DataAll$rec_session)
  levels(DataAll$pe_level)<-c("LowPE", "MediumPE", "HighPE")
  levels(DataAll$rec_session)<-c("ImmediateRec", "DelayedRec")
  
   # save the data
  write.csv(DataAll, paste("computational_model/output_files/", "fittedData.", setup, ".",mod, 
                           ".csv", sep=""), row.names = F)
}


