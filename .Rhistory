idvar = "participant")
gplot_exp2_pred_cont<-ggplot(data_agg_exp2_pred_cont,
aes( x=predicted_contingency, y=rec_acc))+
geom_bar(aes(predicted_contingency, rec_acc, fill = predicted_contingency),
position="dodge",stat="summary", fun.y="mean", SE=F)+
geom_jitter(width = 0.20, alpha = 0.20 )+
geom_errorbar(aes(y = rec_acc, ymin = rec_acc - se, ymax = rec_acc + se),
color = "black", width = 0.10, data=data_summary_exp2_pred_cont)+
#facet_wrap(experiment~.)+
theme_classic()+
ylab("% Hit")+
theme(legend.position = "none")+
theme(
plot.title = element_text(size = 22),
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text=element_text(size=20)
)+
theme(strip.text.x = element_text(size = 18))+
xlab("Contingency Condition of the Object Presented")+
ggtitle("Experiment 2")+
facet_wrap(.~prediction_accuracy)+
theme(plot.title = element_text(hjust = 0.5))+
scale_fill_manual(values =   c("#DDCC77","#88CCEE", "#AA4499","#44AA99","#332288"))
gplot_exp2_pred_cont
gplot_exp2_pred_cont<-ggplot(data_agg_exp2_pred_cont,
aes( x=predicted_contingency, y=rec_acc))+
geom_bar(aes(predicted_contingency, rec_acc, fill = predicted_contingency),
position="dodge",stat="summary", fun.y="mean", SE=F)+
geom_jitter(width = 0.20, alpha = 0.20 )+
geom_errorbar(aes(y = rec_acc, ymin = rec_acc - se, ymax = rec_acc + se),
color = "black", width = 0.10, data=data_summary_exp2_pred_cont)+
#facet_wrap(experiment~.)+
theme_classic()+
ylab("% Hit")+
theme(legend.position = "none")+
theme(
plot.title = element_text(size = 22),
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text=element_text(size=20)
)+
theme(strip.text.x = element_text(size = 18))+
xlab("Contingency Condition of the Predicted Category")+
ggtitle("Experiment 2")+
facet_wrap(.~prediction_accuracy)+
theme(plot.title = element_text(hjust = 0.5))+
scale_fill_manual(values =   c("#DDCC77","#88CCEE", "#AA4499","#44AA99","#332288"))
gplot_exp2_pred_cont
# save it
ggsave("computational_model/figures/pred_contingency_acc_exp2.png",
width = 7, height = 7)
lsmeans(modexp1_pred_cont_acc, pairwise~prediction_accuracy*predicted_contingency,
adjust = "bonferroni")
# analyse
modexp1_pred_cont_acc<-glmer(recognition_accuracy~prediction_accuracy*predicted_contingency+
(prediction_accuracy*predicted_contingency | participant),
family = binomial, data = exp1,
glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=100000)))
lsmeans(modexp1_pred_cont_acc, pairwise~prediction_accuracy*predicted_contingency,
adjust = "bonferroni")
lsmeans(modexp1_pred_cont_correct,pairwise~predicted_contingency,
adjust = "bonferroni")
# Analyze seperately for correct vs incorrect predictions
modexp1_pred_cont_correct<-glmer(recognition_accuracy~predicted_contingency+
(predicted_contingency | participant),
family = binomial,
data = exp1[exp1$prediction_accuracy=="Correct",],
glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=100000)))
lsmeans(modexp1_pred_cont_correct,pairwise~predicted_contingency,
adjust = "bonferroni")
debugSource("~/PowerFolders/Frankfurt_University/PIVOTAL/PREMUP_computational/computational_model/analysis_files/02.ModelFree_analyses.R", echo=TRUE)
# analyse
modexp1_pred_acc<-glmer(recognition_accuracy~
prediction_accuracy*prediction_condition+
(prediction_accuracy*prediction_condition | participant),
family = binomial, data = exp1,
glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=100000)))
lsmeans(modexp1_pred_acc, pairwise~prediction_accuracy*prediction_condition,
adjust = "bonferroni")
Anova(modexp1_pred_acc, type = "III")
Anova(modexp1_pred_cont_acc, type = "II")
# analyse
modexp1_pred_cont_acc<-glmer(recognition_accuracy~prediction_accuracy*predicted_contingency+
(prediction_accuracy*predicted_contingency | participant),
family = binomial, data = exp1,
glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=100000)))
Anova(modexp1_pred_cont_acc, type = "II")
Anova(modexp1_pred_cont_acc, type = "III")
Anova(modexp1_pred_cont_acc, type = "II")
# Analyze seperately for correct vs incorrect predictions
modexp1_pred_cont_correct<-glmer(recognition_accuracy~predicted_contingency+
(predicted_contingency | participant),
family = binomial,
data = exp1[exp1$prediction_accuracy=="Correct",],
glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=100000)))
summary(modexp1_pred_cont_correct)
lsmeans(modexp1_pred_cont_correct,pairwise~predicted_contingency,
adjust = "bonferroni")
exp(0.86)
exp(1.094)
modexp1_pred_cont_incorrect<-glmer(recognition_accuracy~predicted_contingency+
(predicted_contingency | participant),
family = binomial,
data = exp1[exp1$prediction_accuracy=="Incorrect",],
glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=100000)))
Anova(modexp1_pred_cont_incorrect)
summary(modexp1_pred_cont_correct)
summary(modexp1_pred_cont_incorrect)
Anova(modexp1_pred_cont_incorrect)
lsmeans(modexp1_pred_cont_incorrect,pairwise~predicted_contingency,
adjust = "bonferroni")
Anova(modexp1_pred_cont_incorrect)
round(3.9972. 3)
round(3.9972, 3)
round(3.9972, 2)
# exclude participants with low performance in phase1
exclPhase1exp2<-c(3 ,13, 28, 36, 39)
exp2<-exp2[!exp2$participant %in% exclPhase1exp2, ]
# rename the levels of prediction accuracy
exp2$prediction_accuracy<-ifelse(exp2$prediction_accuracy==0, "Incorrect",
"Correct")
# turn them into a factor
exp2$prediction_accuracy<-as.factor(exp2$prediction_accuracy)
# make "incorrect" the first level
exp2$prediction_accuracy<-relevel(exp2$prediction_accuracy,
"Incorrect")
data_agg_exp2_pred_cont<-exp2 %>%
group_by(  prediction_accuracy, participant, predicted_contingency) %>%
dplyr::summarise(rec_acc = mean(recognition_accuracy, na.rm = T),
experiment = first(experiment))
data_summary_exp2_pred_cont<-
summarySEwithin(data_agg_exp2_pred_cont,
measurevar = "rec_acc",
withinvars = c( "prediction_accuracy",
"predicted_contingency"),
idvar = "participant")
gplot_exp2_pred_cont<-ggplot(data_agg_exp2_pred_cont,
aes( x=predicted_contingency, y=rec_acc))+
geom_bar(aes(predicted_contingency, rec_acc, fill = predicted_contingency),
position="dodge",stat="summary", fun.y="mean", SE=F)+
geom_jitter(width = 0.20, alpha = 0.20 )+
geom_errorbar(aes(y = rec_acc, ymin = rec_acc - se, ymax = rec_acc + se),
color = "black", width = 0.10, data=data_summary_exp2_pred_cont)+
#facet_wrap(experiment~.)+
theme_classic()+
ylab("% Hit")+
theme(legend.position = "none")+
theme(
plot.title = element_text(size = 22),
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text=element_text(size=20)
)+
theme(strip.text.x = element_text(size = 18))+
xlab("Contingency Condition of the Predicted Category")+
ggtitle("Experiment 2")+
facet_wrap(.~prediction_accuracy)+
theme(plot.title = element_text(hjust = 0.5))+
scale_fill_manual(values =   c("#DDCC77","#88CCEE", "#AA4499","#44AA99","#332288"))
gplot_exp2_pred_cont
# analyse
modexp2_pred_cont_acc<-glmer(recognition_accuracy~prediction_accuracy*predicted_contingency+
(prediction_accuracy*predicted_contingency  | participant),
family = binomial, data = exp2,
glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=100000)))
# analyse
modexp2_pred_cont_acc<-glmer(recognition_accuracy~prediction_accuracy*predicted_contingency+
(prediction_accuracy*predicted_contingency  | participant),
family = binomial, data = exp2,
glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=100000)))
summary(modexp2_pred_cont_acc)
Anova(modexp2_pred_cont_acc, type = "III")
# analyse only predicted contingency
modexp2_pred_cont<-glmer(recognition_accuracy~predicted_contingency+
(predicted_contingency  | participant),
family = binomial, data = exp2,
glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=100000)))
lsmeans(modexp2_pred_cont, pairwise~predicted_contingency, adjust = "Bonferroni")
debugSource("~/PowerFolders/Frankfurt_University/PIVOTAL/PREMUP_computational/computational_model/analysis_files/02.ModelFree_analyses.R", echo=TRUE)
# Convert the variable into a factor
exp1$predicted_contingency<-as.factor(exp1$predicted_contingency)
data_agg_exp1_pred_cont<-exp1 %>%
group_by(  prediction_accuracy, participant, predicted_contingency) %>%
dplyr::summarise(rec_acc = mean(recognition_accuracy, na.rm = T),
experiment = first(experiment))
View(data_agg_exp1_pred_cont)
data_agg_exp1_pred_cont$participant[data_agg_exp1_pred_cont$rec_acc>0.70]
data_agg_exp1_pred_cont$participant[data_agg_exp1_pred_cont$rec_acc==1]
unique(data_agg_exp1_pred_cont$participant[data_agg_exp1_pred_cont$rec_acc==1])
unique(data_agg_exp1_pred_cont$participant[data_agg_exp1_pred_cont$rec_acc==1 &
data_agg_exp1_pred_cont$prediction_accuracy == "Incorrect"])
unique(data_agg_exp1_pred_cont$participant[data_agg_exp1_pred_cont$rec_acc==1 &
data_agg_exp1_pred_cont$prediction_accuracy == "Correct"  &
data_agg_exp1_pred_cont$predicted_contingency =="0.20"])
unique(data_agg_exp1_pred_cont$participant[data_agg_exp1_pred_cont$rec_acc==1 &
data_agg_exp1_pred_cont$prediction_accuracy == "Incorrect"&
data_agg_exp1_pred_cont$predicted_contingency =="0.20"])
unique(data_agg_exp1_pred_cont$participant[data_agg_exp1_pred_cont$rec_acc==1 &
data_agg_exp1_pred_cont$prediction_accuracy == "Correct"  &
data_agg_exp1_pred_cont$predicted_contingency =="0.20"])
unique(data_agg_exp1_pred_cont$participant[data_agg_exp1_pred_cont$rec_acc==1 &
data_agg_exp1_pred_cont$prediction_accuracy == "Incorrect"&
data_agg_exp1_pred_cont$predicted_contingency =="0.20"])
unique(data_agg_exp1_pred_cont$participant[data_agg_exp1_pred_cont$rec_acc==1 &
data_agg_exp1_pred_cont$prediction_accuracy == "Correct"  &
data_agg_exp1_pred_cont$predicted_contingency =="0.20"])
# get the alpha and beta
read.csv(paste0("/home/francesco/PowerFolders/Frankfurt_University/PIVOTAL/PREMUP_computational/exp1/outputs/group_level/computational_model",
"ParameterEstimation.exp1.betalimit=10.initialQ=0.33.fLR_Instr.csv"))
# get the alpha and beta
param<-read.csv(paste0("/home/francesco/PowerFolders/Frankfurt_University/PIVOTAL/PREMUP_computational/exp1/outputs/group_level/computational_model",
"/ParameterEstimation.exp1.betalimit=10.initialQ=0.33.fLR_Instr.csv"))
incorr<-unique(data_agg_exp1_pred_cont$participant[data_agg_exp1_pred_cont$rec_acc==1 &
data_agg_exp1_pred_cont$prediction_accuracy == "Incorrect"&
data_agg_exp1_pred_cont$predicted_contingency =="0.20"])
corr<-unique(data_agg_exp1_pred_cont$participant[data_agg_exp1_pred_cont$rec_acc==1 &
data_agg_exp1_pred_cont$prediction_accuracy == "Correct"  &
data_agg_exp1_pred_cont$predicted_contingency =="0.20"])
param1<-param[param$PartNum %in% incorr]
param1<-param[param$PartNum %in% incorr,]
paramincorr1<-param[param$PartNum %in% incorr,]
paramincorr2<-param[!param$PartNum %in% incorr,]
paramincorr1$type<-"highper"
paramincorr2$type<-"lowper"
# bind
paraincorrall<-rbind(paramincorr1,paramincorr2)
View(paraincorrall)
# model
alphaincorr<-lm(alpa~type, data = paraincorrall)
# model
alphaincorr<-lm(alpha~type, data = paraincorrall)
summary(alphaincorr)
betaincorr<-lm(beta~type, data = paraincorrall)
summary(betaincorr)
# now for correct
paramcorr1<-param[param$PartNum %in% corr,]
paramcorr2<-param[!param$PartNum %in% corr,]
paramcorr1$type<-"highper"
paramcorr2$type<-"lowper"
# now for correct
paramcorr1<-param[param$PartNum %in% corr,]
paramcorr2<-param[!param$PartNum %in% corr,]
paramcorr1$type<-"highper"
paramcorr2$type<-"lowper"
# bind
paramcorrall<-rbind(paramcorr1,paramcorr2)
# model
alphacorr<-lm(alpha~type, data = paramcorrall)
summary(alphacorr)
betacorr<-lm(beta~type, data = paramcorrall)
summary(betacorr)
summary(alphaincorr)
summary(betaincorr)
corr<-unique(data_agg_exp1_pred_cont$participant[data_agg_exp1_pred_cont$rec_acc==0 &
data_agg_exp1_pred_cont$prediction_accuracy == "Correct"  &
data_agg_exp1_pred_cont$predicted_contingency =="0.20"])
# now for correct
paramcorr1<-param[param$PartNum %in% corr,]
paramcorr2<-param[!param$PartNum %in% corr,]
paramcorr1$type<-"highper"
paramcorr2$type<-"lowper"
# bind
paramcorrall<-rbind(paramcorr1,paramcorr2)
# model
alphacorr<-lm(alpha~type, data = paramcorrall)
summary(alphacorr)
betacorr<-lm(beta~type, data = paramcorrall)
summary(betacorr)
paramcorr1$type<-"lowerper"
paramcorr2$type<-"highper"
# bind
paramcorrall<-rbind(paramcorr1,paramcorr2)
# model
alphacorr<-lm(alpha~type, data = paramcorrall)
summary(alphacorr)
betacorr<-lm(beta~type, data = paramcorrall)
summary(betacorr)
paramcorr1$type<-"Zero Hit Rate / Correct - 0.20"
paramcorr2$type<-"Non-Zero Hit rate / Correct - 0.20"
# bind
paramcorrall<-rbind(paramcorr1,paramcorr2)
# model
alphacorr<-lm(alpha~type, data = paramcorrall)
summary(alphacorr)
betacorr<-lm(beta~type, data = paramcorrall)
summary(betacorr)
# plot
gplot_exp1_pred_acc<-ggplot(paramcorrall,
aes( x=type, y=beta))+
geom_bar(aes(type, beta, fill = type),
position="dodge",stat="summary", fun.y="mean", SE=F)+
geom_jitter(width = 0.20, alpha = 0.3 )+
#facet_wrap(experiment~.)+
theme_classic()+
ylab("% Hit")+
theme(legend.position = "none")+
theme(
plot.title = element_text(size = 30),
axis.title.x = element_text(size = 28),
axis.title.y = element_text(size = 28),
axis.text=element_text(size=28)
)+
theme(strip.text.x = element_text(size = 28))+
xlab("Contingency Condition of the Object Presented")+
ggtitle("Experiment 1")+
facet_wrap(.~prediction_accuracy)+
theme(plot.title = element_text(hjust = 0.5))+
scale_fill_manual(values =   c("#DDCC77", "#CC6677","#117733"))
gplot_exp1_pred_acc
gplot_exp1_pred_acc<-ggplot(paramcorrall,
aes( x=type, y=beta))+
geom_bar(aes(type, beta, fill = type),
position="dodge",stat="summary", fun.y="mean", SE=F)+
geom_jitter(width = 0.20, alpha = 0.3 )+
#facet_wrap(experiment~.)+
theme_classic()+
ylab("% Hit")+
theme(legend.position = "none")+
theme(
plot.title = element_text(size = 30),
axis.title.x = element_text(size = 28),
axis.title.y = element_text(size = 28),
axis.text=element_text(size=28)
)+
theme(strip.text.x = element_text(size = 28))+
xlab("Contingency Condition of the Object Presented")+
ggtitle("Experiment 1")+
#facet_wrap(.~prediction_accuracy)+
theme(plot.title = element_text(hjust = 0.5))+
scale_fill_manual(values =   c("#DDCC77", "#CC6677","#117733"))
gplot_exp1_pred_acc
summary(betaincorr)
betaincorr<-lm(beta~type, data = paraincorrall)
summary(betaincorr)
# bind
paramcorrall<-rbind(paramcorr1,paramcorr2)
# model
alphacorr<-lm(alpha~type, data = paramcorrall)
summary(alphacorr)
betacorr<-lm(beta~type, data = paramcorrall)
summary(betacorr)
rm(list=ls())
library(dplyr)
library(ggplot2)
#library(here)
library(gridExtra) # for plotting
library(viridis)#
# retrieve functions
cd<-getwd()
setwd("computational_model")
source("helper_functions/cumAccbyScene.R")
source("helper_functions/getFiles.R")
source("helper_functions/getcumAcc.R")
source("helper_functions/cumAcc.R")
exps<-c("exp1", "exp2")
# number of participants for the two experiments, respectively
participantN<-c(32, 80)
e<-1
# current exp
exp<-exps[e]
# number of participants
participants<-participantN[e]
if (exp == "exp1"){
setwd(cd)
files_1<-selPhase(1, "exp1")
setwd(cd)
files_2<-selPhase(2, "exp1")
setwd(cd)
}
# Initialize a variable for storing all participants' data
partAll<-vector()
# INITIALIZE ALL THE PARAMETERS OF THE PLOTS
# size of the title
title_size=30
# size of the axes
axes_size=28
# size of the legend text
legend_size=2
for (j in 1:participants){
tryCatch({
if (exp =="exp1"){
# get the file of the participant for both the phase1 and phase2
currfile1<-read.csv(paste("exp1/trial_sequences/",
files_1[j], sep=""))
currfile2<-read.csv(paste("exp1/trial_sequences/",
files_2[j], sep=""))
} else {
j<-ifelse(j<10, paste0("0",j), j)
currfile1<-
read.csv(paste0("exp2/data/BIDS/sub-0",j,
"/sub-0",j,"_task-learning_cleaned.csv"))
currfile2<-
read.csv(paste0("exp2/data/BIDS/sub-0",j,
"/sub-0",j,"_task-enc_cleaned.csv"))
#fix the names
names(currfile1)[3]<-"trialN"
# delete unnecessary variables
currfile1<-subset(currfile1,select=-iteration_index)
currfile2<-subset(currfile2,select=-fillers)
names(currfile1)[which(names(currfile1)=="scn_cat")]<-"scene_cat"
names(currfile2)[which(names(currfile2)=="scn_cat")]<-"scene_cat"
}
# mark the type as learning or encoding phase
currfile1$type<-"Learning Phase"
currfile2$type<-"Encoding Phase"
# get the name of the variable that indicates prediciton accuracy,
# which is different in exp1 vs exp2
predAcc<-ifelse(exp=="exp1", "acc", "trial_acc")
# get cumulative accuracy by scene
currfile1<-cumAccbyScene(currfile1, predAcc)
currfile2<-cumAccbyScene(currfile2, predAcc)
# bind them
currfile<-rbind(currfile1, currfile2)
# order it
currfile<-currfile[order(currfile$scene_cat),]
# add participant number
if (exp =="exp1"){
if (as.numeric(substr(files_1[j], 5,6))<10){
currfile$participant<-rep(as.numeric(substr(files_1[j], 6,6)),
nrow(currfile))
}else{
currfile$participant<-rep(as.numeric(substr(files_1[j], 5,6)),
nrow(currfile))
}
}
# append to the dataframe
partAll<-rbind(partAll, currfile)
},   error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
}
if (exp=="exp1"){
# get the scene condition by pe level
partAll$scn_condition<-ifelse(partAll$pe_level==1  | partAll$pe_level==3,
"0.80", "0.33")
#values for the colors
values <-c("#CC6677","#117733")
} else{
partAll$scn_condition<-ifelse(partAll$scn_condition==1 , "0.50", ifelse(
partAll$scn_condition==2, "0.70", "0.90"))
values <-c( "#AA4499" ,"#44AA99","#332288")
}
# select only the first 40 particiapnts (immediate)
partAll<-partAll[partAll$participant<41,]
# get the standard error and cumulative accuracy for simALL
Datawidepart<- partAll %>%
group_by( trialNbyscene, scn_condition, type) %>%
dplyr::summarise(mean = mean(cumAccbyScene), sd = sd(cumAccbyScene))
View(Datawidepart)
Datawidepart$se<-Datawidepart$sd/sqrt(participants)
# get label for plot
label<-ifelse(exp=="exp1", "(a)", "(b)")
# add a horizontal line representing chance level
chance<-ifelse(exp=="exp1", 0.33, 0.50)
expname<-ifelse(exp=="exp1", "Experiment 1", "Experiment 2")
Datawidepart$type<- factor(Datawidepart$type, levels = c("Learning Phase",
"Encoding Phase"))
#assign(paste0("plot", e),
ggplot(Datawidepart, aes(x = trialNbyscene, y=mean,
color = scn_condition, fill = scn_condition, linetype = scn_condition))+
stat_summary(fun.y="mean",geom="line", size = 1.5)+ylim(c(0,1))+
geom_ribbon(aes(ymin=mean-1.96*se, ymax=mean+1.96*se), alpha=0.5, colour=NA)+
theme_classic()+
xlab("Trial Number by Condition")+
ylab("Cumulative Accuracy")+
ggtitle(expname)+
#theme(legend.position = "none")+
theme(
plot.title = element_text(size = title_size),
axis.title.x = element_text(size = axes_size),
axis.title.y = element_text(size = axes_size),
axis.text=element_text(size=axes_size),
legend.text=element_text(size=rel(legend_size)),
legend.title = element_text(size=rel(legend_size)),
strip.text.x = element_text(size=axes_size)
)+
theme(plot.title = element_text(hjust = 0.5))+
facet_grid(.~type,  scales = "free_x")+
geom_hline(yintercept=chance, linetype = "dashed", colour = "black")+
guides(color=guide_legend(title="Contingency"), fill=guide_legend(title="Contingency"),
linetype =guide_legend(title="Contingency") ) +
#annotate(geom="text",  label=label,size=8,family="serif")+
scale_color_manual(values = c(values))
View(Datawidepart)
View(Datawidepart)
View(Datawidepart)
#assign(paste0("plot", e),
ggplot(Datawidepart, aes(x = trialNbyscene, y=mean,
color = scn_condition, fill = scn_condition, linetype = scn_condition))+
stat_summary(fun.y="mean",geom="line", size = 1.5)+ylim(c(0,1))+
geom_ribbon(aes(ymin=mean-1.96*se, ymax=mean+1.96*se), alpha=0.5, colour=NA)+
theme_classic()+
xlab("Trial Number by Condition")+
ylab("Cumulative Accuracy")+
ggtitle(expname)+
#theme(legend.position = "none")+
theme(
plot.title = element_text(size = title_size),
axis.title.x = element_text(size = axes_size),
axis.title.y = element_text(size = axes_size),
axis.text=element_text(size=axes_size),
legend.text=element_text(size=rel(legend_size)),
legend.title = element_text(size=rel(legend_size)),
strip.text.x = element_text(size=axes_size)
)+
theme(plot.title = element_text(hjust = 0.5))+
#facet_grid(.~type,  scales = "free_x")+
geom_hline(yintercept=chance, linetype = "dashed", colour = "black")+
guides(color=guide_legend(title="Contingency"), fill=guide_legend(title="Contingency"),
linetype =guide_legend(title="Contingency") ) +
#annotate(geom="text",  label=label,size=8,family="serif")+
scale_color_manual(values = c(values))
View(Datawidepart)
