theme_classic()+
ylab("% Hit")+
theme(legend.position = "none")+
theme(
plot.title = element_text(size = title_size),
axis.title.x = element_text(size = axes_size),
axis.title.y = element_text(size = axes_size),
axis.text=element_text(size=axes_size),
strip.text.x = element_text(size = axes_size)
)+
ylim(0,1)+
xlab("Prediction Condition")+
ggtitle("Experiment 1")+
theme(plot.title = element_text(hjust = 0.5))+
scale_fill_manual(values =   c("#DDCC77", "#CC6677"))
gplot_exp1_pred_acc
ggsave(paste0(img_path, "contingency_acc_precition_exp1.png"),
width = img_width+2, height = img_height)
# is that significant?
exp1$prediction_accuracy<-as.factor(exp1$prediction_accuracy)
#exp1$prediction_condition<-relevel(exp1$prediction_condition, ref = "Strong")
modexp1_acc_pred<-glmer(recognition_accuracy~prediction_accuracy*prediction_condition
+(prediction_accuracy*prediction_condition  | participant),
family = binomial, data = exp1,
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=100000)))
library(glmer)
library(lme4)
library(matrix)
library(Matrix)
exp1$prediction_condition<-relevel(exp1$prediction_condition, ref = "0.33")
# break down the interaction
modexp1_acc_pred_Correct<-glmer(recognition_accuracy~prediction_condition
+(prediction_condition  | participant),
family = binomial, data = exp1[exp1$prediction_accuracy=="Correct",],
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=100000)))
summary(modexp1_acc_pred_Correct)
library(lsmeans)
modexp1_acc_pred_Incorrect<-glmer(recognition_accuracy~prediction_condition
+(prediction_condition  | participant),
family = binomial, data = exp1[exp1$prediction_accuracy=="Incorrect",],
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=100000)))
summary(modexp1_acc_pred_Incorrect)
lsmeans(modexp1_acc_pred_Incorrect, pairwise~prediction_condition, adjust =
"bonferroni")
#-----------------Experiment2------------------------------------------------#
# exclude participants with low performance in phase1
exclPhase1exp2<-c(3 ,13, 28, 36, 39)
exp2<-exp2[!exp2$participant %in% exclPhase1exp2, ]
### aggregate
# take the se within-participant
exp2$prediction_accuracy<-ifelse(exp2$prediction_accuracy==0, "Incorrect",
"Correct")
data_agg_exp2<-exp2 %>%
group_by(prediction_condition, participant) %>%
dplyr::summarise(rec_acc = mean(recognition_accuracy, na.rm = T),
experiment = first(experiment))
data_agg_exp2_acc<-exp2 %>%
group_by(  prediction_accuracy, participant) %>%
dplyr::summarise(rec_acc = mean(recognition_accuracy, na.rm = T),
experiment = first(experiment))
library(Rmisc)
dat_summary_exp2_acc<- summarySEwithin(data_agg_exp2_acc,
measurevar = "rec_acc",
withinvars = c("prediction_accuracy"),
idvar = "participant")
gplot_exp2_pred<-ggplot(data_agg_exp2_acc, aes( x=prediction_accuracy, y=rec_acc))+
geom_bar(aes(prediction_accuracy, rec_acc, fill = prediction_accuracy),
position="dodge",stat="summary", fun.y="mean", SE=F)+
geom_errorbar(aes(y = rec_acc, ymin = rec_acc - se, ymax = rec_acc + se),
color = "black", width = 0.10, data=dat_summary_exp2_acc)+
geom_jitter(width = 0.20 )+
#facet_wrap(experiment~.)+
theme_bw()+
ylab("% Hit")+
theme(legend.position = "none")+
theme(
plot.title = element_text(size = 22),
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text=element_text(size=20)
)+
xlab("Contingency")+
ggtitle("Experiment 2")+
theme(plot.title = element_text(hjust = 0.5))+
scale_fill_viridis(discrete=TRUE, option = "magma")
gplot_exp2_pred<-ggplot(data_agg_exp2_acc, aes( x=prediction_accuracy, y=rec_acc))+
geom_bar(aes(prediction_accuracy, rec_acc, fill = prediction_accuracy),
position="dodge",stat="summary", fun.y="mean", SE=F)+
geom_errorbar(aes(y = rec_acc, ymin = rec_acc - se, ymax = rec_acc + se),
color = "black", width = 0.10, data=dat_summary_exp2_acc)+
geom_jitter(width = 0.20 )+
#facet_wrap(experiment~.)+
theme_bw()+
ylab("% Hit")+
theme(legend.position = "none")+
theme(
plot.title = element_text(size = title_size),
axis.title.x = element_text(size = axes_size),
axis.title.y = element_text(size = axes_size),
axis.text=element_text(size=axes_size)
)+
xlab("Contingency")+
ggtitle("Experiment 2")+
theme(plot.title = element_text(hjust = 0.5))+
scale_fill_viridis(discrete=TRUE, option = "magma")
gplot_exp2_pred
gplot_exp2_pred
strVflat = c(-1,1,0)
strVweak=c(-1,0,1)
flatVweak = c(1, 0,1)
# accuracy now
levels(data_agg_exp2_acc$prediction_accuracy)<-c("Incorrect", "Correct")
data_agg_exp2_acc$prediction_accuracy<-ifelse(data_agg_exp2_acc$prediction_accuracy ==0,
"Incorrect", "Correct")
exp2$prediction_accuracy<-as.factor(exp2$prediction_accuracy)
dat_summary_exp2_acc <- summarySEwithin(data_agg_exp2_acc,
measurevar = "rec_acc",
withinvars = c( "prediction_accuracy"),
idvar = "participant")
data_agg_exp2_acc$prediction_accuracy<-as.factor(data_agg_exp2_acc$prediction_accuracy)
gplot_exp2_acc<-ggplot(data_agg_exp2_acc, aes( x=prediction_accuracy, y=rec_acc))+
geom_bar(aes(prediction_accuracy, rec_acc, fill = prediction_accuracy),
position="dodge",stat="summary", fun.y="mean", SE=F)+
geom_errorbar(aes(y = rec_acc, ymin = rec_acc - se, ymax = rec_acc + se),
color = "black", width = 0.10, data=dat_summary_exp2_acc)+
geom_jitter(width = 0.20)+
#facet_wrap(experiment~.)+
theme_bw()+
ylab("% Hit")+
theme(legend.position = "none")+
theme(
plot.title = element_text(size = 22),
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text=element_text(size=20)
)+
ylim(0,1)+
xlab("Prediction Outcome")+
ggtitle("Experiment 2")+
theme(plot.title = element_text(hjust = 0.5))+
scale_fill_viridis(discrete=TRUE, option = "plasma")
gplot_exp2_acc<-ggplot(data_agg_exp2_acc, aes( x=prediction_accuracy, y=rec_acc))+
geom_bar(aes(prediction_accuracy, rec_acc, fill = prediction_accuracy),
position="dodge",stat="summary", fun.y="mean", SE=F)+
geom_errorbar(aes(y = rec_acc, ymin = rec_acc - se, ymax = rec_acc + se),
color = "black", width = 0.10, data=dat_summary_exp2_acc)+
geom_jitter(width = 0.20)+
#facet_wrap(experiment~.)+
theme_bw()+
ylab("% Hit")+
theme(legend.position = "none")+
theme(
plot.title = element_text(size = title_size),
axis.title.x = element_text(size = axes_size),
axis.title.y = element_text(size = axes_size),
axis.text=element_text(size=axes_size)
)+
ylim(0,1)+
xlab("Prediction Outcome")+
ggtitle("Experiment 2")+
theme(plot.title = element_text(hjust = 0.5))+
scale_fill_viridis(discrete=TRUE, option = "plasma")
gplot_exp2_acc
# save it
ggsave(paste0("/home/francesco/PowerFolders/Frankfurt_University/PIVOTAL/",
"PREMUP_computational/computational_model/figures/prediction_acc_exp2.png"),
width = 9, height = 7)
# accuracy by prediction
data_agg_exp2_acc_pred<-exp2 %>%
group_by(  prediction_accuracy,prediction_condition,  participant) %>%
dplyr::summarise(rec_acc = mean(recognition_accuracy, na.rm = T),
experiment = first(experiment))
dat_summary_exp2_acc_pred <- summarySEwithin(data_agg_exp2_acc_pred,
measurevar = "rec_acc",
withinvars = c( "prediction_accuracy", "prediction_condition"),
idvar = "participant")
data_agg_exp2_acc_pred$prediction_accuracy<-as.factor(data_agg_exp2_acc_pred$prediction_accuracy)
gplot_exp2_pred_acc<-ggplot(data_agg_exp2_acc_pred, aes( x=prediction_accuracy, y=rec_acc))+
geom_bar(aes(prediction_accuracy, rec_acc, fill = prediction_accuracy),
position="dodge",stat="summary", fun.y="mean", SE=F)+
theme_classic()+
geom_errorbar(aes(y = rec_acc, ymin = rec_acc - se, ymax = rec_acc + se),
color = "black", width = 0.10, data=dat_summary_exp2_acc_pred)+
facet_wrap(prediction_condition~., ncol = 5)+
geom_jitter(width = 0.20 , alpha=0.3)+
ylab("% Hit")+
theme(legend.position = "none")+
theme(
plot.title = element_text(size = 22),
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text=element_text(size=20),
strip.text.x = element_text(size = 20)
)+
xlab("Prediction Condition")+
ylim(0,1)+
ggtitle("Experiment 2")+
theme(plot.title = element_text(hjust = 0.5))+
scale_fill_manual(values =   c("#DDCC77", "#CC6677"))
gplot_exp2_pred_acc
##---------------------------------------------------------
# accuracy by prediction
data_agg_exp2_acc_pred<-exp2 %>%
group_by(  prediction_accuracy,prediction_condition,  participant) %>%
dplyr::summarise(rec_acc = mean(recognition_accuracy, na.rm = T),
experiment = first(experiment))
dat_summary_exp2_acc_pred <- summarySEwithin(data_agg_exp2_acc_pred,
measurevar = "rec_acc",
withinvars = c( "prediction_accuracy", "prediction_condition"),
idvar = "participant")
# rename the levels of prediction accuracy
data_agg_exp2_acc_pred$prediction_accuracy<-as.factor(data_agg_exp2_acc_pred$prediction_accuracy)
levels(data_agg_exp2_acc_pred$prediction_accuracy)<-c("Incorrect", "Correct")
gplot_exp2_pred_acc<-ggplot(data_agg_exp2_acc_pred, aes( x=prediction_accuracy, y=rec_acc))+
geom_bar(aes(prediction_accuracy, rec_acc, fill = prediction_accuracy),
position="dodge",stat="summary", fun.y="mean", SE=F)+
geom_errorbar(aes(y = rec_acc, ymin = rec_acc - se, ymax = rec_acc + se),
color = "black", width = 0.10, data=dat_summary_exp2_acc_pred)+
facet_wrap(prediction_accuracy~.)+
theme_bw()+
ylab("% Hit")+
theme(legend.position = "none")+
theme(
plot.title = element_text(size = 22),
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text=element_text(size=20),
strip.text.x = element_text(size = 20)
)+
ylim(0,1)+
xlab("Prediction Condition")+
ggtitle("Experiment 2")+
theme(plot.title = element_text(hjust = 0.5))+
scale_fill_viridis(discrete=TRUE, option = "plasma")
gplot_exp2_pred_acc
data_agg_exp2_pred_acc$prediction_accuracy<-relevel(data_agg_exp2_pred_acc$prediction_accuracy,
"Incorrect")
#accuracy by prediction condition
data_agg_exp2_pred_acc<-exp2 %>%
group_by( prediction_accuracy, participant, prediction_condition) %>%
dplyr::summarise(rec_acc = mean(recognition_accuracy, na.rm = T),
experiment = first(experiment))
data_summary_exp2_pred_acc <- summarySEwithin(data_agg_exp2_pred_acc,
measurevar = "rec_acc",
withinvars = c( "prediction_accuracy",
"prediction_condition"),
idvar = "participant")
data_agg_exp2_pred_acc$prediction_accuracy<-relevel(data_agg_exp2_pred_acc$prediction_accuracy,
"Incorrect")
gplot_exp2_pred_acc<-ggplot(data_agg_exp2_pred_acc, aes( x=prediction_condition, y=rec_acc))+
geom_bar(aes(prediction_condition, rec_acc, fill = prediction_condition),
position="dodge",stat="summary", fun.y="mean", SE=F)+
geom_jitter(width = 0.20, alpha = 0.2 )+
geom_errorbar(aes(y = rec_acc, ymin = rec_acc - se, ymax = rec_acc + se),
color = "black", width = 0.10, data=data_summary_exp2_pred_acc)+
#facet_wrap(experiment~.)+
theme_classic()+
ylab("% Hit")+
theme(legend.position = "none")+
theme(
plot.title = element_text(size = 22),
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text=element_text(size=20)
)+
xlab("Contingency")+
ggtitle("Experiment 2")+
facet_wrap(.~prediction_accuracy)+
theme(plot.title = element_text(hjust = 0.5))+
theme(strip.text.x = element_text(size = 18))+
scale_fill_manual(values =   c("#DDCC77","#88CCEE", "#AA4499","#44AA99","#332288"))
gplot_exp2_pred_acc
gplot_exp2_pred_acc
gplot_exp2_pred_acc<-ggplot(data_agg_exp2_pred_acc, aes( x=prediction_condition, y=rec_acc))+
geom_bar(aes(prediction_condition, rec_acc, fill = prediction_condition),
position="dodge",stat="summary", fun.y="mean", SE=F)+
geom_jitter(width = 0.20, alpha = 0.2 )+
geom_errorbar(aes(y = rec_acc, ymin = rec_acc - se, ymax = rec_acc + se),
color = "black", width = 0.10, data=data_summary_exp2_pred_acc)+
#facet_wrap(experiment~.)+
theme_classic()+
ylab("% Hit")+
theme(legend.position = "none")+
theme(
plot.title = element_text(size = title_size),
axis.title.x = element_text(size = axes_size),
axis.title.y = element_text(size = axes_size),
axis.text=element_text(size=axes_size)
)+
xlab("Contingency")+
ggtitle("Experiment 2")+
facet_wrap(.~prediction_accuracy)+
theme(plot.title = element_text(hjust = 0.5))+
theme(strip.text.x = element_text(size = axes_size))+
scale_fill_manual(values =   c("#DDCC77","#88CCEE", "#AA4499","#44AA99","#332288"))
gplot_exp2_pred_acc
# save it
ggsave(paste0(img_path,"/contingency_acc_exp2.png"),
width = img_width, height = img_height)
# save it
ggsave(paste0(img_path,"/contingency_acc_exp2.png"),
width = img_width, height = img_height)
source("~/PowerFolders/Frankfurt_University/PIVOTAL/PREMUP_computational/computational_model/05.modelComparison_comparefit.R")
library(lme4)
library(lmerTest)
library(car)
library(reshape2)
library(ggplot2)
library(dplyr)
library(ggjoy)
install.packages("lmerTest")
install.packages("ggjoy")
library(lme4)
library(lmerTest)
library(car)
library(car)
library(lme4)
library(lmerTest)
library(car)
library(lmerTest)
library(car)
library(reshape2)
library(ggplot2)
library(dplyr)
library(ggjoy)
rm(list=ls())
cd<-getwd()
# function that takes the arguments from the command line
Args<-commandArgs(trailingOnly = T)
# the only argument is setup
setup<-Args[1]
# retrieve the different models
setwd(paste0( setup,"/outputs/group_level/computational_model"))
if (setup=="exp1"){ # if this is the pilot, the Q is 0.33
# list the files with parameter estimation
files<-list.files(pattern="ParameterEstimation.exp1.betalimit=10.initialQ=0.33.*")
# and, as the name is longer, sartpoint for substringing is earlier
startStr<-53
}else{
# list the files with parameter estimation
files<-list.files(pattern="ParameterEstimation.exp2.betalimit=10.initialQ=0.5.*")
# startpoint is 48
startStr<-52
}
setup
getwd()
setwd("computational_model")
# retrieve the different models
setwd(paste0( setup,"/outputs/group_level/computational_model"))
getwd()
setwd("/Users/francescopupillo/PowerFolders/Frankfurt_University/PIVOTAL/PREMUP_computational/")
# retrieve the different models
setwd(paste0( setup,"/outputs/group_level/computational_model"))
setup<-"exp1"
# retrieve the different models
setwd(paste0( setup,"/outputs/group_level/computational_model"))\
# retrieve the different models
setwd(paste0( setup,"/outputs/group_level/computational_model"))
# list the files with parameter estimation
files<-list.files(pattern="ParameterEstimation.exp1.betalimit=10.initialQ=0.33.*")
# and, as the name is longer, sartpoint for substringing is earlier
startStr<-53
if (setup=="exp1"){ # if this is the pilot, the Q is 0.33
# list the files with parameter estimation
files<-list.files(pattern="ParameterEstimation.exp1.betalimit=10.initialQ=0.33.*")
# and, as the name is longer, sartpoint for substringing is earlier
startStr<-53
}else{
# list the files with parameter estimation
files<-list.files(pattern="ParameterEstimation.exp2.betalimit=10.initialQ=0.5.*")
# startpoint is 48
startStr<-52
}
# create dataset to store the bic
BicAll<-vector()
# loop through the files
for (n in 1:length(files)){
# read the first files
cfile<-read.csv(files[n])
# select parameters
cfile<-cfile[,c("PartNum", "BIC", "LogLikel")]
# assing the name of the model
modname<-substr(files[n], startStr, nchar(files[n])-4 )
# assing the identifier
cfile$model<-rep(modname, times=nrow(cfile))
# assign to the dataframe
BicAll<-rbind(BicAll, cfile)
}
setwd(cd)
# if it is exp 2, we need only the first 40
if (setup=="exp2"){
BicAll<-BicAll[BicAll$PartNum<41,]
}
# try to convert to wide
library(reshape2)
# Model of interest
MoI<- c("dLR_Instr","dfLR_Instr", "fLR_Instr", "fLR_Eval")
BicAll_wideBIC <- dcast(BicAll, PartNum ~ model, value.var=c("BIC"),
fun.aggregate =sum)
BicAll_wideLL <- dcast(BicAll, PartNum ~ model, value.var=c("LogLikel"),
fun.aggregate =sum)
# print
write.csv(BicAll_wideBIC,paste0("computational_model/output_files/TableBIC.bypart.",
setup, ".csv"))
# find the best model for each participant according to BIC
# (the model that minimize the BIC)
ggplot(BicAll, aes(x = model,y= BIC))+
geom_bar(aes(model, BIC, fill = model),
position="dodge",stat="summary", fun="mean", SE=T)+
stat_summary(fun.data = "mean_cl_boot", size = 0.8, geom="errorbar",
width=0.2 )+
#geom_jitter( size=1,width=0.1)+
theme(axis.text.x = element_blank())+ # we are showing the different levels
# through the colors, so we can avoid naming the bars
theme(axis.ticks.x = element_blank())+
theme_bw()
# descriptives
# get within participant SE
library(Rmisc)
table <- summarySEwithin(BicAll,
measurevar = "BIC",
withinvars = c("model"),
#betweenvars = "session",
idvar = "PartNum")
# detach the package
detach("package:Rmisc", unload=TRUE)
# print
write.csv(table,paste0("computational_model/output_files/TableBIC.LL.",
setup, ".csv"))
# analyse
BicModel<-lmer(BIC~model+(1|PartNum), data = BicAll)
print(
summary(BicModel)
)
anova(BicModel)
BicAll_wideBIC$BestModel<-NA
BicAll_wideBIC$SecondBest<-NA
for (j in 1: nrow(BicAll_wideBIC)){
tryCatch({
# index<-which(BicAll_wideBIC[j,]==min(BicAll_wideBIC[j,(2:(length(files)))], na.rm=T))
index<-which(BicAll_wideBIC[j,]==min(BicAll_wideBIC[j,MoI]))
index2<-which(BicAll_wideBIC[j,]==unlist(sort(BicAll_wideBIC[j,MoI])[2]))
if (length(index)>1) {# fi there are more than one model
BicAll_wideBIC$BestModel[j]<-NA
BicAll_wideBIC$SecondBest[j]<-NA
}else{
BicAll_wideBIC$BestModel[j]<-names(BicAll_wideBIC[index])
BicAll_wideBIC$SecondBest[j]<-names(BicAll_wideBIC[index2])
}
}, error = function(e) { print(paste("problem with number", j))},
warning = function(f) { print(paste("warning with number", j))})
}
# create difference between the best model and the second best
BicAll_wideBIC$BestModelBIC<-NA
BicAll_wideBIC$SecondBestModelBIC<-NA
for (n in 1: nrow(BicAll_wideBIC)){
tryCatch({
BicAll_wideBIC$BestModelBIC[n]<-BicAll_wideBIC[n,BicAll_wideBIC$BestModel[n]]
BicAll_wideBIC$SecondBestModelBIC[n]<-BicAll_wideBIC[n,BicAll_wideBIC$SecondBest[n]]
}, error=function(e){}
)
}
# create the difference between the two
BicAll_wideBIC$BicDiff<-BicAll_wideBIC$SecondBestModelBIC -BicAll_wideBIC$BestModelBIC
# create the evidence
BicAll_wideBIC$evidence<-NA
for (n in 1: nrow(BicAll_wideBIC)){
tryCatch({
if(BicAll_wideBIC$BicDiff[n]>10){
BicAll_wideBIC$evidence[n]<-"very strong"
} else if (BicAll_wideBIC$BicDiff[n]<10 & (BicAll_wideBIC$BicDiff[n]>=6)){
BicAll_wideBIC$evidence[n]<-"strong"
}else if ( BicAll_wideBIC$BicDiff[n]<6 & (BicAll_wideBIC$BicDiff[n]>=2)){
BicAll_wideBIC$evidence[n]<-"positive"
} else{
BicAll_wideBIC$evidence[n]<-"weak"
}
}, error=function(e){}
)
}
# now long
BicAll_long<-melt(BicAll_wideBIC[, c(1, 6, 11)], id.vars = c("PartNum", "BestModel" ))
BicAll_long$value<-as.factor(BicAll_long$value)
levels(BicAll_long$value)<-c("very strong", "strong", "positive", "weak")
names(BicAll_long)[4]<-"Evidence"
# reorder the levels (models)
BicAll_long$BestModel<-factor(BicAll_long$BestModel, levels =MoI)
# get the title
Title<-ifelse(setup=="exp1", "Experiment 1", "Experiment 2")
BicAll_long[!is.na(BicAll_long$Evidence),] %>%
mutate(BestModel = factor(BestModel,
levels= rev(MoI))) %>%
#ggplot(BicAll_long[!is.na(BicAll_long$Evidence),],
ggplot( aes( x=BestModel, fill = Evidence)) +
geom_bar(position="stack", stat="count")+
#scale_fill_grey()+
ylab("Participants")+
coord_flip()+
theme_classic()+
theme(
plot.title = element_text(size = 22),
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text=element_text(size=20),
axis.text.y = element_blank()
)+
ggtitle(Title)+
theme(plot.title = element_text(hjust = 0.5))+
scale_fill_viridis_d()
library(lme4)
library(lmerTest)
library(car)
