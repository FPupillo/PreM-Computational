summary(PEbyAccExp1)
Anova(PEbyAccExp1)
# in the positive side
PEbyAccExp1Pos<-glmer(id_acc~PE+(PE|SubNum), family= binomial,
data = exp1[exp1$trial_acc=="Correct",],
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=100000)))
summary(PEbyAccExp1Pos)
# in the negative side
PEbyAccExp1Neg<-glmer(id_acc~PE+(PE|SubNum), family= binomial,
data = exp1[exp1$trial_acc=="Incorrect",],
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=100000)))
summary(PEbyAccExp1Neg)
# analyse
PEbyAccExp2<-glmer(id_acc~PE*trial_acc+(trial_acc*PE|SubNum), family= binomial,
data = exp2,
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=100000)))
summary(PEbyAccExp2)
Anova(PEbyAccExp2)
# in the positive side
PEbyAccExp2Pos<-glmer(id_acc~PE+(PE|SubNum), family= binomial,
data = exp2[exp2$trial_acc=="Correct",],
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=100000)))
summary(PEbyAccExp2Pos)
# in the negative side
PEbyAccExp2Neg<-glmer(id_acc~PE+(PE|SubNum), family= binomial,
data = exp2[exp2$trial_acc=="Incorrect",],
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=100000)))
summary(PEbyAccExp2Neg)
PEDistrExp1<-ggplot(exp1, aes(x= PE,fill=scn_condition))
plot1<-
PEDistrExp1+geom_density(aes(y=..density..),alpha=0.3)+
theme_bw()+
geom_density()+
annotate(geom="text",  label="a",size=8,family="serif")+
guides(fill=guide_legend(title="Scene Condition"))+
scale_fill_viridis_d()
plot1
# rename scene condition
exp2$scn_condition<-as.factor(exp2$scn_condition)
levels(exp2$scn_condition)<-c("Flat", "Weak", "Strong")
levels(exp1$trial_acc)<-c("Incorrect", "Correct")
## PE by accuracy - exp2
exp2$trial_acc<-as.factor(exp2$trial_acc)
levels(exp2$trial_acc)<-c("Incorrect", "Correct")
exp1$exp<-"Experiment1"
exp2$exp<-"Experiment2"
exp2$session<-as.character(exp2$session)
exp1$session<-as.character(exp1$session)
exp1$PE_level<-as.character(exp1$PE_level)
exp2$PE_level<-as.character(exp2$PE_level)
exp1$scn_condition<-as.character(exp1$scn_condition)
exp2$scn_condition<-as.character(exp2$scn_condition)
# experiment 1
# learning rate
exp1lr<-fread(paste0(dirname(abs), "/exp1/outputs/group_level/computational_model/",
"ParameterEstimation.exp1.betalimit=10.initialQ=0.33.fLR_Instr.csv"))
# select the first three rows
exp1lr<-exp1lr[,1:3]
# change the name of the variable indicating the participant
names(exp1lr)[1]<-"SubNum"
exp1<-merge(exp1, exp1lr, by = "SubNum")
# exp 2
exp2lr<-fread(paste0(dirname(abs),"/exp2/outputs/group_level/computational_model/",
"ParameterEstimation.exp2.betalimit=10.initialQ=0.5.fLR_Instr.csv"))
# select the first three rows
exp2lr<-exp2lr[,1:3]
# change the name of the variable indicating the participant
names(exp2lr)[1]<-"SubNum"
exp2<-merge(exp2, exp2lr, by = "SubNum")
# add "2" in front of the subnum
exp2$SubNum<-exp2$SubNum+200
exp2<-exp2[, names(exp1)]
# merge thetwo
allData<-data.frame(rbind(exp1,exp2 ))
# how many trials per participant
allData %>%
group_by(SubNum) %>%
tally()
setwd(dirname(getwd()))
getwd()
write.csv(allData, paste0(abs,"/output_files/fittedData_exp1-exp2_fLR_Instr.csv"))
# plot merged data
PEDistrExp<-ggplot(allData, aes(x= PE, fill="scn_condition"))
plot2<-
PEDistrExp+geom_density(alpha=.4)+
theme_classic()+
theme(
plot.title = element_text(size = 22),
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text=element_text(size=20)
)+
scale_fill_viridis_d(name ="Contingencies",breaks =c("Flat", "Strong", "Weak"),
labels=c("0.33/0.50","0.80/0.90","0.70"))
plot2
ggsave(paste0(abs, "/figures/PE_instr_distr.exp1.exp2.png"),
width = 7, height = 7)
# now with the histogram
PEDistrExpN<-ggplot(allData, aes(x= PE, fill = ""))
PEDistrExpN+
geom_histogram(aes(y = ..density..),
colour = 1, fill = "white") +
geom_density(alpha=.4,show.legend = FALSE)+
theme_classic()+
theme(
plot.title = element_text(size = 22),
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text=element_text(size=13)
)+
scale_fill_viridis_d()
ggsave(paste0(abs, "/figures/PE_instr_distrNOscene.exp1.exp2.png"),
width = 5, height = 5)
# Now PE and recognition accuracy
# plot it first
print(
ggplot(allData, aes( x=PE, y=id_acc))+
geom_line(stat="smooth",method = "glm", formula=y~x,method.args=list(family="binomial"), alpha=0.5)+
aes(colour = factor(SubNum), alpha=0.3)+
geom_smooth(method="glm",formula=y~x,method.args=list(family="binomial"), colour="black", se=T)+
theme(strip.text.x = element_text(size = 13))+ ylim(c(0,1))+
facet_grid(.~trial_acc)+
theme_classic()+
theme(
plot.title = element_text(size = 22),
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text=element_text(size=13),
)+
theme(strip.text.x = element_text(size = 22))+
theme(panel.spacing = unit(1, "lines"))+
#ggtitle("Experiment 2")+
theme(legend.position = "none")+
ylab("p(Hit)")
)
# save it
ggsave(paste0(abs, "/figures/PE_mem_fLR_instr.exp1.exp2.png"),
width = 7, height = 7)
# analyse
PEbyAccAll<-glmer(id_acc~PE*trial_acc*alpha*exp+(trial_acc*PE|SubNum), family= binomial,
data = allData,
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=100000)))
summary(PEbyAccAll)
Anova(PEbyAccAll, type = "III")
# we need to center PE
allData$PE.c <- scale(allData$PE, center=TRUE, scale=FALSE)
allData$alpha.c <- scale(allData$alpha, center=TRUE, scale=FALSE)
allData$exp.c <- ifelse(allData$exp == "Experiment1", -0.5, 0.5)
allData$trial_acc.c <- ifelse(allData$trial_acc == "Incorrect", -0.5, 0.5)
# plot it again
print(
ggplot(allData, aes( x=PE.c, y=id_acc))+
geom_line(stat="smooth",method = "glm", formula=y~x,method.args=list(family="binomial"), alpha=0.5)+
aes(colour = factor(SubNum), alpha=0.3)+
geom_smooth(method="glm",formula=y~x,method.args=list(family="binomial"), colour="black", se=T)+
theme(strip.text.x = element_text(size = 13))+ ylim(c(0,1))+
facet_grid(.~trial_acc)+
theme_classic()+
theme(
plot.title = element_text(size = 22),
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text=element_text(size=20)
)+
theme(legend.position = "none")+
ylab("p(Hit)")
)
PEbyAccAll.c<-glmer(id_acc~PE.c*trial_acc.c*alpha.c*exp.c+(trial_acc.c*PE.c|SubNum), family= binomial,
data = allData,
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=100000)))
summary(PEbyAccAll.c)
# exponentiate the beta for OR
betas<-as.data.frame(summary(PEbyAccAll.c)$coefficients)
OR<-cbind(row.names(betas),exp(betas$Estimate))
Anova(PEbyAccAll.c, type = "III")
# get bootstrapped confidenceßß intervals
#CI<-confint(PEbyAccAll.c, method=c("boot"), boot.type=c("norm"))
# save the bootstrapped confidence intervals, as it it a very time consuming computation
#save(CI, file = "CI.Rdata")
# load the data
load("CI.Rdata")
# get bootstrapped confidenceßß intervals
#CI<-confint(PEbyAccAll.c, method=c("boot"), boot.type=c("norm"))
# save the bootstrapped confidence intervals, as it it a very time consuming computation
#save(CI, file = "CI.Rdata")
# load the data
load("CI.Rdata")
list.files
list.files()
# get bootstrapped confidenceßß intervals
#CI<-confint(PEbyAccAll.c, method=c("boot"), boot.type=c("norm"))
# save the bootstrapped confidence intervals, as it it a very time consuming computation
#save(CI, file = "CI.Rdata")
# load the data
load("S.CI.Rdata")
knitr::opts_chunk$set(echo = TRUE)
# model based stats
rm(list=ls())
library(ggplot2)
library(lme4)
library(dplyr)
library(reshape2)
library(lmerTest)
library(car)
library(data.table)
library(ggpubr)
# set current directory to the parent folder
setwd(dirname(getwd()))
cd<-getwd()
source("helper_functions/getPE.R")
setwd("output_files")
getwd()
# get the parent folder
abs<-paste0(dirname(getwd()))
exp1<-read.csv(paste(abs, "/output_files/fittedData.exp1.Phase2.fLR_Instr.csv", sep=""))
# exclude fillers
exp1<-exp1[exp1$pred_Cond!=4,]
# select only immediate
exp1<-exp1[exp1$rec_session=="ImmediateRec",]
# exclude participants with low performance in phase1
exclPhase1<-c(7 ,16, 19, 20, 23)
exp1<-exp1[!exp1$SubNum %in% exclPhase1, ]
exp2<-read.csv(paste(abs, "/output_files/fittedData.exp2.Phase2.fLR_Instr.csv", sep=""))
# select only immediate
exp2<-exp2[exp2$participant<41,]
# select only where practice == 0
exp2<-exp2[exp2$practice==0,]
# delete the fillers
exp2<-exp2[exp2$fillers==0,]
# exclude participants with low performance in phase1
exclPhase1exp2<-c(3 ,13, 28, 36, 39)
exp2<-exp2[!exp2$SubNum %in% exclPhase1exp2, ]
# select datasets
exp1<-getPE(exp1,3)
exp2<-getPE(exp2, 2)
# select the variables of interest
VoI<-c("pe_level", "trialN", "rec_acc", "acc", "rec_session", "SubNum", "PE",
"rec_Obj", "scene_cat")
exp1<-exp1[, VoI]
names(exp1)[c(1,3,4,5, 8, 9)]<-c("PE_level",  "id_acc","trial_acc", "session",
"obj_file", "scn_cat")
# convert PE level as factor
exp1$PE_level<-as.factor(exp1$PE_level)
# rename PE levels
levels(exp1$PE_level) <- c("0.9", "0.1", "0.5")
# order the PE
exp1$PE_level<-factor(exp1$PE_level, level = c("0.1", "0.5",  "0.9"))
# create scene condition
exp1$scn_condition<-ifelse(exp1$PE_level=="0.5", "Flat", "Strong")
# rename scene condition
exp2$scn_condition<-as.factor(exp2$scn_condition)
levels(exp2$scn_condition)<-c("Flat", "Weak", "Strong")
levels(exp1$trial_acc)<-c("Incorrect", "Correct")
## PE by accuracy - exp2
exp2$trial_acc<-as.factor(exp2$trial_acc)
levels(exp2$trial_acc)<-c("Incorrect", "Correct")
exp1$exp<-"Experiment1"
exp2$exp<-"Experiment2"
exp2$session<-as.character(exp2$session)
exp1$session<-as.character(exp1$session)
exp1$PE_level<-as.character(exp1$PE_level)
exp2$PE_level<-as.character(exp2$PE_level)
exp1$scn_condition<-as.character(exp1$scn_condition)
exp2$scn_condition<-as.character(exp2$scn_condition)
# experiment 1
# learning rate
exp1lr<-fread(paste0(dirname(abs), "/exp1/outputs/group_level/computational_model/",
"ParameterEstimation.exp1.betalimit=10.initialQ=0.33.fLR_Instr.csv"))
# select the first three rows
exp1lr<-exp1lr[,1:3]
# change the name of the variable indicating the participant
names(exp1lr)[1]<-"SubNum"
exp1<-merge(exp1, exp1lr, by = "SubNum")
# exp 2
exp2lr<-fread(paste0(dirname(abs),"/exp2/outputs/group_level/computational_model/",
"ParameterEstimation.exp2.betalimit=10.initialQ=0.5.fLR_Instr.csv"))
# select the first three rows
exp2lr<-exp2lr[,1:3]
# change the name of the variable indicating the participant
names(exp2lr)[1]<-"SubNum"
exp2<-merge(exp2, exp2lr, by = "SubNum")
# add "2" in front of the subnum
exp2$SubNum<-exp2$SubNum+200
exp2<-exp2[, names(exp1)]
# merge thetwo
allData<-data.frame(rbind(exp1,exp2 ))
setwd(dirname(getwd()))
getwd()
write.csv(allData, paste0(abs,"/output_files/fittedData_exp1-exp2_fLR_Instr.csv"))
# plot merged data
PEDistrExp<-ggplot(allData, aes(x= PE, fill="scn_condition"))
plot2<-
PEDistrExp+geom_density(alpha=.4)+
theme_classic()+
theme(
plot.title = element_text(size = 22),
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text=element_text(size=20)
)+
scale_fill_viridis_d(name ="Contingencies",breaks =c("Flat", "Strong", "Weak"),
labels=c("0.33/0.50","0.80/0.90","0.70"))
plot2
ggsave(paste0(abs, "/figures/PE_instr_distr.exp1.exp2.png"),
width = 7, height = 7)
# now with the histogram
PEDistrExpN<-ggplot(allData, aes(x= PE, fill = ""))
PEDistrExpN+
geom_histogram(aes(y = ..density..),
colour = 1, fill = "white") +
geom_density(alpha=.4,show.legend = FALSE)+
theme_classic()+
theme(
plot.title = element_text(size = 22),
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text=element_text(size=13)
)+
scale_fill_viridis_d()
ggsave(paste0(abs, "/figures/PE_instr_distrNOscene.exp1.exp2.png"),
width = 5, height = 5)
# Now PE and recognition accuracy
# plot it first
print(
ggplot(allData, aes( x=PE, y=id_acc))+
geom_line(stat="smooth",method = "glm", formula=y~x,method.args=list(family="binomial"), alpha=0.5)+
aes(colour = factor(SubNum), alpha=0.3)+
geom_smooth(method="glm",formula=y~x,method.args=list(family="binomial"), colour="black", se=T)+
theme(strip.text.x = element_text(size = 13))+ ylim(c(0,1))+
facet_grid(.~trial_acc)+
theme_classic()+
theme(
plot.title = element_text(size = 22),
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text=element_text(size=13),
)+
theme(strip.text.x = element_text(size = 22))+
theme(panel.spacing = unit(1, "lines"))+
#ggtitle("Experiment 2")+
theme(legend.position = "none")+
ylab("p(Hit)")
)
# analyse
PEbyAccAll<-glmer(id_acc~PE*trial_acc*alpha*exp+(trial_acc*PE|SubNum), family= binomial,
data = allData,
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=100000)))
# we need to center PE
allData$PE.c <- scale(allData$PE, center=TRUE, scale=FALSE)
allData$alpha.c <- scale(allData$alpha, center=TRUE, scale=FALSE)
allData$exp.c <- ifelse(allData$exp == "Experiment1", -0.5, 0.5)
allData$trial_acc.c <- ifelse(allData$trial_acc == "Incorrect", -0.5, 0.5)
# plot it again
print(
ggplot(allData, aes( x=PE.c, y=id_acc))+
geom_line(stat="smooth",method = "glm", formula=y~x,method.args=list(family="binomial"), alpha=0.5)+
aes(colour = factor(SubNum), alpha=0.3)+
geom_smooth(method="glm",formula=y~x,method.args=list(family="binomial"), colour="black", se=T)+
theme(strip.text.x = element_text(size = 13))+ ylim(c(0,1))+
facet_grid(.~trial_acc)+
theme_classic()+
theme(
plot.title = element_text(size = 22),
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text=element_text(size=20)
)+
theme(legend.position = "none")+
ylab("p(Hit)")
)
PEbyAccAll.c<-glmer(id_acc~PE.c*trial_acc.c*alpha.c*exp.c+(trial_acc.c*PE.c|SubNum), family= binomial,
data = allData,
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=100000)))
# get bootstrapped confidenceßß intervals
#CI<-confint(PEbyAccAll.c, method=c("boot"), boot.type=c("norm"))
# save the bootstrapped confidence intervals, as it it a very time consuming computation
#save(CI, file = "CI.Rdata")
# load the data
load("S.CI.Rdata")
# exponentiate them
exp(CI)
CI
intervals(PEbyAccAll.c)
# in the positive side
PEbyAccAllPos<-glmer(id_acc~PE+(PE|SubNum), family= binomial,
data = allData[allData$trial_acc=="Correct",],
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=100000)))
summary(PEbyAccAllPos)
# in the negative side
PEbyAccAllNeg<-glmer(id_acc~PE+(PE|SubNum), family= binomial,
data = allData[allData$trial_acc=="Incorrect",],
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=100000)))
summary(PEbyAccAllNeg)
# is there an effect of condition?
PEbyAccAllCond<-glmer(id_acc~PE*trial_acc*scn_condition+(trial_acc*PE|SubNum), family= binomial,
data = allData,
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=100000)))
# analyse
PEbyAccAll<-glmer(id_acc~PE*trial_acc*exp+(trial_acc*PE|SubNum), family= binomial,
data = allData,
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=100000)))
# Now PE and recognition accuracy
# plot it first
print(
ggplot(allData, aes( x=PE, y=id_acc))+
geom_line(stat="smooth",method = "glm", formula=y~x,method.args=list(family="binomial"), alpha=0.5)+
aes(colour = factor(SubNum), alpha=0.3)+
geom_smooth(method="glm",formula=y~x,method.args=list(family="binomial"), colour="black", se=T)+
theme(strip.text.x = element_text(size = 13))+ ylim(c(0,1))+
facet_grid(.~trial_acc)+
theme_classic()+
theme(
plot.title = element_text(size = 22),
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text=element_text(size=13),
)+
theme(strip.text.x = element_text(size = 22))+
theme(panel.spacing = unit(1, "lines"))+
#ggtitle("Experiment 2")+
theme(legend.position = "none")+
ylab("p(Hit)")
)
# plot merged data
PEDistrExp<-ggplot(allData, aes(x= PE, fill="scn_condition"))
plot2<-
PEDistrExp+geom_density(alpha=.4)+
theme_classic()+
theme(
plot.title = element_text(size = 22),
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text=element_text(size=20)
)+
scale_fill_viridis_d(name ="Contingencies",breaks =c("Flat", "Strong", "Weak"),
labels=c("0.33/0.50","0.80/0.90","0.70"))
plot2
# plot merged data
# with the histogram
PEDistrExpN<-ggplot(allData, aes(x= PE, fill = ""))
PEDistrExpN+
geom_histogram(aes(y = ..density..),
colour = 1, fill = "white") +
geom_density(alpha=.4,show.legend = FALSE)+
theme_classic()+
theme(
plot.title = element_text(size = 22),
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text=element_text(size=13)
)+
scale_fill_viridis_d()
# Now PE and recognition accuracy
# plot it first
print(
ggplot(allData, aes( x=PE, y=id_acc))+
geom_line(stat="smooth",method = "glm", formula=y~x,method.args=list(family="binomial"), alpha=0.5)+
aes(colour = factor(SubNum), alpha=0.3)+
geom_smooth(method="glm",formula=y~x,method.args=list(family="binomial"), colour="black", se=T)+
theme(strip.text.x = element_text(size = 13))+ ylim(c(0,1))+
facet_grid(.~trial_acc)+
theme_classic()+
theme(
plot.title = element_text(size = 22),
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text=element_text(size=13),
)+
theme(strip.text.x = element_text(size = 22))+
theme(panel.spacing = unit(1, "lines"))+
#ggtitle("Experiment 2")+
theme(legend.position = "none")+
ylab("p(Hit)")
)
print(
ggplot(allData, aes( x=PE, y=id_acc))+
geom_line(stat="smooth",method = "glm", formula=y~x,method.args=list(family="binomial"), alpha=0.5)+
aes(colour = factor(SubNum), alpha=0.3)+
geom_smooth(method="glm",formula=y~x,method.args=list(family="binomial"), colour="black", se=T)+
theme(strip.text.x = element_text(size = 13))+ ylim(c(0,1))+
facet_grid(.~trial_acc)+
theme_classic()+
theme(
plot.title = element_text(size = 22),
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text=element_text(size=13),
)+
theme(strip.text.x = element_text(size = 22))+
theme(panel.spacing = unit(1, "lines"))+
#ggtitle("Experiment 2")+
theme(legend.position = "none")+
ylab("p(Hit)")
)
exp1$trial_acc
levels(exp1$trial_acc)<-c("Incorrect", "Correct")
exp1$trial_acc
# convert PE level as factor
exp1$PE_level<-as.factor(exp1$PE_level)
# rename PE levels
levels(exp1$PE_level) <- c("0.9", "0.1", "0.5")
exp1$PE_level
# order the PE
exp1$PE_level<-factor(exp1$PE_level, level = c("0.1", "0.5",  "0.9"))
# create scene condition
exp1$scn_condition<-ifelse(exp1$PE_level=="0.5", "Flat", "Strong")
# rename scene condition
exp2$scn_condition<-as.factor(exp2$scn_condition)
levels(exp2$scn_condition)<-c("Flat", "Weak", "Strong")
levels(exp1$trial_acc)<-c("Incorrect", "Correct")
levels(exp1$trial_acc)
exp1$trial_acc
