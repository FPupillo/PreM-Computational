library(pracma)
library(here)
cd<-getwd()
setwd(cd)
#setwd("computational_model")
# source the files with the functions
source("helper_functions/getmu.R")
source("helper_functions/BICcompute.R")
source("helper_functions/searchGlobal.R")
source(("helper_functions/softmax.R"))
source(("helper_functions/update.R"))
source(("helper_functions/getx.R"))
source(("helper_functions/getobs.R"))
source(("helper_functions/getSceneCond.R"))
source(("helper_functions/var_murphy.R"))
source(("helper_functions/chooseBinomial.R"))
source(("helper_functions/getProbStrongWeak.R"))
# retrieve the functions
functions<-c( "likelihood_functions", "fitting_functions", "simulation_functions")
for (f in functions){
# helper functions
setwd(paste0(f))
fun<-list.files()
for (f in 1:length(fun)){
source(fun[f])
}
setwd(cd)
}
# how many simulations?
sims<-100
# how many trials per scene?
trials<-300
# what are the contingencies?
mu<-getmu(Args[4])
setup<-Args[4]
Args<-c(10, 1, 0.33, "exp1")
# what are the contingencies?
mu<-getmu(Args[4])
setup<-Args[4]
# fittings parameters
alphaBound<-c(0,1)
if (Args[2]=="infinite"){
beta2<-"i"}else {beta2<-Args[2]}
betaBound<-c(0, Args[1])
betaBound[2]<-Args[1]
startPoints<-as.numeric(Args[2])
initialQ<-as.numeric(Args[3])
initialQ<-matrix(initialQ, nrow = 6 ,ncol = ncol(mu))
# create matrix and write it down a file
models<-c("dLR_Instr", "fLR_Instr", "fLR_Eval")
betalim<-10
model<-"fLR_Instr"
betalim<-10
# make a loop to simulate participants' behaviour for specific values of alpha and beta
alphaseq<-seq(0, 1, length.out = sims)
alpharan<-sample(alphaseq, sims, replace=F)
# beta is sampled from the exponential distribution
betaran<-rexp(sims,2/10)
# progress bar
prb<-txtProgressBar(min=0, max=sims, style=3)
# detect cores for runnning in parallel
cores=detectCores()
cl <- makeCluster(cores[1]-floor(cores[1]/3), outfile="") # to not overload your computer
j<-1
# simulate data
sim<-sim_function(T = trials, mu =  mu,alpha = alpharan[j],
beta =  betaran[j],
initialQ = initialQ)
# get simulation function
sim_function<-get(paste0("simulate_", model))
# get fitting function
fit_function<-get(paste0("fit_", model))
# simulate data
sim<-sim_function(T = trials, mu =  mu,alpha = alpharan[j],
beta =  betaran[j],
initialQ = initialQ)
# change the a to response
sim$response<-sim$a
sim$scene_cat<-sim$scene
# change the scene to scene cat
sim<-getSceneCond(sim)
# estimate parameters
est<-searchGlobal(data = sim, alphaBound = alphaBound, betaBound = betaBound,
startPoints = startPoints, initialQ = initialQ,
fittingfunction = fit_function, model = model )   # assign to the dataset
View(searchGlobal)
model<-"fLR_Eval"
# get simulation function
sim_function<-get(paste0("simulate_", model))
# get fitting function
fit_function<-get(paste0("fit_", model))
# simulate data
sim<-sim_function(T = trials, mu =  mu,alpha = alpharan[j],
beta =  betaran[j],
initialQ = initialQ)
paste0("simulate_", model)
# change the a to response
sim$response<-sim$a
sim$scene_cat<-sim$scene
# change the scene to scene cat
sim<-getSceneCond(sim)
# estimate parameters
est<-searchGlobal(data = sim, alphaBound = alphaBound, betaBound = betaBound,
startPoints = startPoints, initialQ = initialQ,
fittingfunction = fit_function, model = model )   # assign to the dataset
# create accuracy
sim$acc<-ifelse(sim$response==sim$object_cat,1,0)
# estimate parameters
est<-searchGlobal(data = sim, alphaBound = alphaBound, betaBound = betaBound,
startPoints = startPoints, initialQ = initialQ,
fittingfunction = fit_function, model = model )   # assign to the dataset
# estimate parameters
est<-searchGlobal(data = sim, alphaBound = alphaBound, betaBound = betaBound,
startPoints = startPoints, initialQ = initialQ,
fittingfunction = fit_function, model = model )   # assign to the dataset
View(est)
!is.null(est$alpha)
!is.null(est$gamma)
# source the files with the function  s
rm(list=ls())
library(here)
library(foreach)
library(doParallel)
library(beepr)
cd<-getwd()
# source the files with the function
source(("computational_model/helper_functions/BICcompute.R"))
source(("computational_model/helper_functions/searchGlobal.R"))
source(("computational_model/helper_functions/softmax.R"))
source(("computational_model/helper_functions/getFiles.R"))
source(("computational_model/helper_functions/getfeedb.R"))
source(("computational_model/helper_functions/getx.R"))
source(("computational_model/helper_functions/getobs.R"))
source(("computational_model/helper_functions/update.R"))
source(("computational_model/helper_functions/fixnames.R"))
source(("computational_model/helper_functions/getProbStrongWeak.R"))
source(("computational_model/helper_functions/var_murphy.R"))
setwd(cd)
# likelihood functions
setwd("computational_model/likelihood_functions")
likfun<-list.files()
for (f in 1:length(likfun)){
source(likfun[f])
}
setwd(cd)
# fitting functions
setwd("computational_model/fitting_functions")
fitfun<-list.files()
for (f in 1:length(fitfun)){
source(fitfun[f])
}
setwd(cd)
# very important, the setup
setup <-"exp2"
phase1Files<- read.csv("exp2/outputs/group_level/group_task-learning.csv")
phase2Files<- read.csv2("exp2/outputs/group_level/share/group_task-rec.csv",
sep=";", header=T,stringsAsFactors=FALSE)
setwd(cd)
Args<-c(1, 10 ,  0.5,"dLR_Instr")
# set the number of the starting points for the optimization function
startPoints<-as.numeric(Args[1])
# set boundaries for the optimization algorithm
alphaBound<-c(0,1)
# for the beta, take the 2 one from the command line
if (Args[2]=="infinite"){
beta2<-"i"}else {beta2<-as.numeric(Args[2])}
betaBound<-c(0,beta2)
# values at which Q is initialised
initialQ <- matrix(as.numeric(Args[3]), ncol=2, nrow=6)
# Type of model
modeltype = Args[4]
# assign fitting and likelihood functions
fittingfunction = get( paste("fit_", modeltype, sep="" ))
likelihoodfunction = get(paste("lik_", modeltype,  sep=""))
print(Args)
# how many participants?
participants<-unique(phase1Files$participant)
# initialize matrix to store the parameters
Parameters<-matrix(NA, nrow = length(participants),ncol = 5)
colnames(Parameters)<-c("PartNum", "alpha","beta",  "BIC",
"LogLikel") #names of the columns
j<-1
j<-21
print(paste("Working on participant", participants[j]))
# subset the files
file1<-phase1Files[phase1Files$participant==participants[j],]
# change the names
names(file1)[c(1:6)]<-c("X.1", "X", "participant.x","trialN" ,"contingency" ,"scn_file.x")
# subset phase2 files for that participant
file2<-phase2Files[phase2Files$participant==participants[j],]
file2$contingency<-file2$trial_cond
names(file2)[4]<-"trialN"
# select variables of intrest from the variables names in phase1
VoI<-c(names(file1)[c(3:12, 14:17, 19)])
file2<-file2[,VoI]
file1<-file1[,VoI]
# bind them
file<-rbind(file1, file2)
# fix the names to make them match the script
file<-fixnames(file)
# add trial acc
file$acc<-file$trial_acc
# delete NAs
file<-file[!is.na(file$scene_cat),]
# name of the model
model<-modeltype
# estimate alpha and beta, calculating the time
start_time<-Sys.time()
est<-searchGlobal(data = file,alphaBound= alphaBound,betaBound= betaBound,
startPoints=  startPoints,initialQ= initialQ,
fittingfunction =fittingfunction,
model = model)
if (is.null(est$alpha)){# this is for the model 1/n where the alpha is null.
alpha<-NA
} else{
alpha<-est$alpha
}
beta<-est$beta
BIC<-est$BIC
LL<-est$logLikel
library(ggplot2)
library(gridExtra) # for plotting
library(ggpubr)
betalim<-10
Args<-commandArgs(trailingOnly = T)
setup<-Args[1]
#setup<-"exp1"
if (setup=="exp1"){
initialQ<-0.33
} else {
initialQ<-0.50
}
model<-"dLR_Instr fLR_Instr fLR_Eval"
getwd()
setwd("computational_model")
m
m<-model<-1
f
name<- paste("output_files/parameterRecovery.",setup, ".",
model, ".", "betalimit=",  betalim,
".initialQ=", initialQ , sep="")
#setup<-"exp1"
if (setup=="exp1"){
initialQ<-0.33
} else {
initialQ<-0.50
}
setup<-"exp1"
name<- paste("output_files/parameterRecovery.",setup, ".",
model, ".", "betalimit=",  betalim,
".initialQ=", initialQ , sep="")
#setup<-"exp1"
if (setup=="exp1"){
initialQ<-0.33
} else {
initialQ<-0.50
}
model<-"dLR_Instr fLR_Instr fLR_Eval"
name<- paste("output_files/parameterRecovery.",setup, ".",
model, ".", "betalimit=",  betalim,
".initialQ=", initialQ , sep="")
# retrieve the file
parameterRecov<-read.csv(paste0(name, ".csv"))
models<-"dLR_Instr fLR_Instr fLR_Eval"
model<-m
name<- paste("output_files/parameterRecovery.",setup, ".",
model, ".", "betalimit=",  betalim,
".initialQ=", initialQ , sep="")
# retrieve the file
parameterRecov<-read.csv(paste0(name, ".csv"))
model
m<-models[1]
name<- paste("output_files/parameterRecovery.",setup, ".",
model, ".", "betalimit=",  betalim,
".initialQ=", initialQ , sep="")
# retrieve the file
parameterRecov<-read.csv(paste0(name, ".csv"))
m<-models[1]
models
models<-c("dLR_Instr, fLR_Instr, fLR_Eval")
model<-m
name<- paste("output_files/parameterRecovery.",setup, ".",
model, ".", "betalimit=",  betalim,
".initialQ=", initialQ , sep="")
# retrieve the file
parameterRecov<-read.csv(paste0(name, ".csv"))
m<-models[1]
models<-c("dLR_Instr", "fLR_Instr", "fLR_Eval")
m<-models[1]
name<- paste("output_files/parameterRecovery.",setup, ".",
model, ".", "betalimit=",  betalim,
".initialQ=", initialQ , sep="")
# retrieve the file
parameterRecov<-read.csv(paste0(name, ".csv"))
model<-m
name<- paste("output_files/parameterRecovery.",setup, ".",
model, ".", "betalimit=",  betalim,
".initialQ=", initialQ , sep="")
# retrieve the file
parameterRecov<-read.csv(paste0(name, ".csv"))
plotalpha<-ggplot(parameterRecov, aes(x=simAlpha, y=fitAlpha)) +
geom_point()+
geom_smooth(method=lm)+
theme_bw()+
stat_cor(method="pearson")+
#stat_cor(method = "pearson", label.x = 3, label.y = 30)+
ggtitle("Alpha parameter")
View(parameterRecov)
plotalpha<-ggplot(parameterRecov, aes(x=simAlpha, y=fitAlpha)) +
geom_point()+
geom_smooth(method=lm)+
theme_bw()+
stat_cor(method="pearson")+
#stat_cor(method = "pearson", label.x = 3, label.y = 30)+
ggtitle("Alpha parameter")
plotbeta<-ggplot(parameterRecov, aes(x=simBeta, y=fitBeta)) +
geom_point()+
geom_smooth(method=lm)+
theme_bw()+
stat_cor(method="pearson")+
xlim(0,10)+
ylim(0,10)+
#stat_cor(method = "pearson", label.x = 3, label.y = 30)+
ggtitle("Beta parameter")
if (model=="dLR_Instr")
(model=="dLR_Instr")
if (model=="dLR_Instr"){
assign(paste0("plot_", model), grid.arrange( plotbeta, ncol=1))
}else{
assign(paste0("plot_", model), grid.arrange( plotalpha, plotbeta, ncol=2))
}
for (m in models){
model<-m
name<- paste("output_files/parameterRecovery.",setup, ".",
model, ".", "betalimit=",  betalim,
".initialQ=", initialQ , sep="")
# retrieve the file
parameterRecov<-read.csv(paste0(name, ".csv"))
plotalpha<-ggplot(parameterRecov, aes(x=simAlpha, y=fitAlpha)) +
geom_point()+
geom_smooth(method=lm)+
theme_bw()+
stat_cor(method="pearson")+
#stat_cor(method = "pearson", label.x = 3, label.y = 30)+
ggtitle("Alpha parameter")
plotbeta<-ggplot(parameterRecov, aes(x=simBeta, y=fitBeta)) +
geom_point()+
geom_smooth(method=lm)+
theme_bw()+
stat_cor(method="pearson")+
xlim(0,10)+
ylim(0,10)+
#stat_cor(method = "pearson", label.x = 3, label.y = 30)+
ggtitle("Beta parameter")
if (model=="dLR_Instr"){
assign(paste0("plot_", model), grid.arrange( plotbeta, ncol=1))
}else{
assign(paste0("plot_", model), grid.arrange( plotalpha, plotbeta, ncol=2))
}
}
source('~/PowerFolders/Frankfurt_University/PIVOTAL/PREMUP_computational/computational_model/parameter_recovery/Print.ParameterRecovery.R')
source('~/PowerFolders/Frankfurt_University/PIVOTAL/PREMUP_computational/computational_model/parameter_recovery/Print.ParameterRecovery.R')
source('~/PowerFolders/Frankfurt_University/PIVOTAL/PREMUP_computational/computational_model/parameter_recovery/Print.ParameterRecovery.R')
source('~/PowerFolders/Frankfurt_University/PIVOTAL/PREMUP_computational/computational_model/parameter_recovery/Print.ParameterRecovery.R')
# source the files with the function  s
rm(list=ls())
library(here)
library(foreach)
library(doParallel)
library(beepr)
setwd(dirname(getwd()))
cd<-getwd()
# source the files with the function
source(("computational_model/helper_functions/BICcompute.R"))
source(("computational_model/helper_functions/searchGlobal.R"))
source(("computational_model/helper_functions/softmax.R"))
source(("computational_model/helper_functions/getFiles.R"))
source(("computational_model/helper_functions/getfeedb.R"))
source(("computational_model/helper_functions/getx.R"))
source(("computational_model/helper_functions/getobs.R"))
source(("computational_model/helper_functions/update.R"))
source(("computational_model/helper_functions/fixnames.R"))
source(("computational_model/helper_functions/getProbStrongWeak.R"))
source(("computational_model/helper_functions/var_murphy.R"))
setwd(cd)
# likelihood functions
setwd("computational_model/likelihood_functions")
likfun<-list.files()
for (f in 1:length(likfun)){
source(likfun[f])
}
setwd(cd)
# fitting functions
setwd("computational_model/fitting_functions")
fitfun<-list.files()
for (f in 1:length(fitfun)){
source(fitfun[f])
}
setwd(cd)
# very important, the setup
setup <-"exp2"
phase1Files<- read.csv("exp2/outputs/group_level/group_task-learning.csv")
phase2Files<- read.csv2("exp2/outputs/group_level/share/group_task-rec.csv",
sep=";", header=T,stringsAsFactors=FALSE)
setwd(cd)
Args<-commandArgs(trailingOnly = T)
# set the number of the starting points for the optimization function
startPoints<-as.numeric(Args[1])
# Type of model
modeltype = Args[4]
# create a name for the output file
name<-paste("exp2/outputs/group_level/computational_model/ParameterEstimation.exp2.",
"betalimit=",betaBound[2],".initialQ=",  Args[3], ".", modeltype, sep="")
print(Args)
# assign fitting and likelihood functions
fittingfunction = get( paste("fit_", modeltype, sep="" ))
likelihoodfunction = get(paste("lik_", modeltype,  sep=""))
Args<-commandArgs(trailingOnly = T)
Args<-c(1, 10 ,  0.5,"dLR_Instr")
# set the number of the starting points for the optimization function
startPoints<-as.numeric(Args[1])
# set boundaries for the optimization algorithm
alphaBound<-c(0,1)
# for the beta, take the 2 one from the command line
if (Args[2]=="infinite"){
beta2<-"i"}else {beta2<-as.numeric(Args[2])}
betaBound<-c(0,beta2)
# values at which Q is initialised
initialQ <- matrix(as.numeric(Args[3]), ncol=2, nrow=6)
# Type of model
modeltype = Args[4]
# create a name for the output file
name<-paste("exp2/outputs/group_level/computational_model/ParameterEstimation.exp2.",
"betalimit=",betaBound[2],".initialQ=",  Args[3], ".", modeltype, sep="")
print(Args)
# assign fitting and likelihood functions
fittingfunction = get( paste("fit_", modeltype, sep="" ))
likelihoodfunction = get(paste("lik_", modeltype,  sep=""))
# how many participants?
participants<-unique(phase1Files$participant)
# initialize matrix to store the parameters
Parameters<-matrix(NA, nrow = length(participants),ncol = 5)
colnames(Parameters)<-c("PartNum", "alpha","beta",  "BIC",
"LogLikel") #names of the columns
# loop through participants
# make it in parallel
cores=detectCores()
cl <- makeCluster(floor(cores[1]- floor(cores[1]/3)), outfile="") # to not overload your computer
registerDoParallel(cl)
j<-1
print(paste("Working on participant", participants[j]))
# subset the files
file1<-phase1Files[phase1Files$participant==participants[j],]
# change the names
names(file1)[c(1:6)]<-c("X.1", "X", "participant.x","trialN" ,"contingency" ,"scn_file.x")
# subset phase2 files for that participant
file2<-phase2Files[phase2Files$participant==participants[j],]
file2$contingency<-file2$trial_cond
names(file2)[4]<-"trialN"
# select variables of intrest from the variables names in phase1
VoI<-c(names(file1)[c(3:12, 14:17, 19)])
file2<-file2[,VoI]
file1<-file1[,VoI]
# bind them
file<-rbind(file1, file2)
# fix the names to make them match the script
file<-fixnames(file)
# add trial acc
file$acc<-file$trial_acc
# delete NAs
file<-file[!is.na(file$scene_cat),]
# name of the model
model<-modeltype
# estimate alpha and beta, calculating the time
start_time<-Sys.time()
est<-searchGlobal(data = file,alphaBound= alphaBound,betaBound= betaBound,
startPoints=  startPoints,initialQ= initialQ,
fittingfunction =fittingfunction,
model = model)
View(est)
end_time<-Sys.time()
print(end_time-start_time)
if (is.null(est$alpha)){# this is for the model 1/n where the alpha is null.
alpha<-NA
} else{
alpha<-est$alpha
}
beta<-est$beta
BIC<-est$BIC
LL<-est$logLikel
paramet<-c("alpha", "beta",  "LL", "BIC")
Parameters<-c(round(as.numeric(substr(phase1Files[j],5,6)),1),
alpha, beta, BIC, LL)
Parameters
j
phase1Files[j]
substr(phase1Files[j],5,6)
phase1Files
Parameters<-c(participants[j],
alpha, beta, BIC, LL)
Parameters
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
abs<-"/home/francesco/PowerFolders/Frankfurt_University/PREMCE/Pilots/Premce-rev2/testing/gitLab/premce/Premce-rev2/Data+Analysis/"
recogData<-read.csv(paste(abs, "output_files/recognitionData.csv", sep=""))
getwd)
getwd()
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
abs<-"/Users/francesco/PowerFolders/Frankfurt_University/PREMCE/Pilots/Premce-rev2/testing/gitLab/premce/Premce-rev2/Data+Analysis/"
recogData<-read.csv(paste(abs, "output_files/recognitionData.csv", sep=""))
library(haven)
